##basics icon:psidust Basics

#introduction+ Introduction
Welcome to $(thing)Psi$(0), the greatest spell-program-based magitech mod on this side of the universe!$(p)To begin your journey to become a spellslinging mage, you'll first need some $(item)Psidust$(0)-- however, one does not simply craft the stuff. Instead, start by crafting a $(item)CAD Assembler$(0) and an $(item)Iron CAD Assembly$(0).
Place the $(item)CAD Assembler$(0) and insert the $(item)Iron CAD Assembly$(0) to construct a very bare-bones $(thing)Casting Assistant Device$(0) ($(thing)CAD$(0), for short).$(p)From there, drop some $(item)Redstone Dust$(0) on the ground, point your new $(thing)CAD$(0) at the dust, and cast with it ($(k:use)) to create your $(item)Psidust$(0).

#cad_assembler CAD Assembler
The $(item)CAD Assembler$(0) is the heart of $(thing)Psi$(0), serving two essential functions.$(p)First, it (as its name suggests) assembles a $(thing)CAD$(0) from its component parts. Second, it loads $(o)non-empty$() $(item)Spell Bullets$(0) into $(thing)CADs$(0) (as well as other things that hold bullets, such as $(item)Psimetal Tools$(0)).
@RECIPE (assembler): Build-a-CAD Workshop
@IMAGE (assembler_build): The simplest CAD that can cast
A $(thing)CAD$(0) is built from of up to five components; the simplest $(thing)CAD$(0) only uses one component, an $(item)Assembly$(0), though this is only useful for crafting $(item)Psidust$(0).$(p)A $(thing)CAD$(0) capable of casting $(thing)Spells$(0) requires a $(item)Core$(0) and a $(item)Socket$(0) as well.$(p)Adding a $(item)Battery$(0) slightly increases a user's maximum $(thing)Psi$(0) energy, and adding a $(item)Colorizer$(0) changes the color of casted $(thing)Spells$(0) (purely cosmetically).
Once a $(thing)CAD$(0) is created, it can be placed in the leftmost panel of the $(item)CAD Assembler$(0). When placed there, the slots below open; $(item)Spell Bullets$(0) can be placed in these slots to be loaded into the $(thing)CAD$(0). Once the bullets are loaded, the $(thing)CAD$(0) is removed and in-hand, and the $(thing)Psi$(0) master keybind ($(k:psimisc.keybind)) is held, the bullets' $(thing)Spells$(0) will be displayed on a HUD, ready to be selected and cast.
@IMAGE (assembler_load): A CAD with one bullet loaded

#spell_programmer Spell Programmer
If the $(item)CAD Assembler$(0) is the heart of $(thing)Psi$(0), then the $(item)Spell Programmer$(0) is the brains of the mod. It's where $(thing)Spells$(0) are written and compiled, and eventually copied into $(item)Spell Bullets$(0) to be cast.$(p)When placed and opened ($(k:use)), it displays a large 9x9 grid; see $(l:basics/tutorial_1)$(item)the tutorial entries$(0)$(/l) for more in-depth knowledge on using this grid.
@RECIPE (programmer): Hour Of Code

#tutorial_1+ Tutorial (1)
Congratulations on getting acquainted with your brand-new $(thing)CAD$(0)! This tablet will serve as a reference manual for this mod, but certain entries (like this one) are tutorials, introducing you to the concepts and terms of a proper spellslinger. (Don't worry, this is the longest tutorial, as it covers all the basics.)
$(o)Note that most keywords in $(item)this color$(0) are links, and can be clicked on to learn more about their respective items, including their recipes.$()$(p)To get started with spell programming, you'll need (duh) a $(item)Spell Programmer$(0).$(p)Additionally, to actually execute your $(thing)Spells$(0), you'll need a better $(thing)CAD$(0) than the one you have right now-- you can construct one in your $(item)CAD Assembler$(0).
You don't have to make another $(item)Assembly$(0); you can put your current $(thing)CAD$(0) in a crafting grid to revert it to an $(item)Iron CAD Assembly$(0) (since it's pretty much just an $(item)Assembly$(0) anyway).$(p)Additionally, $(thing)Spells$(0) can't be cast directly out of a $(thing)CAD$(0); instead they're stored in $(item)Spell Bullets$(0), so to get rolling you'll need a handful of those as well.
Once all your materials are gathered, the standard workflow for $(thing)Spell$(0) creation goes as follows:$(p)$(p)$(li)Construct a $(thing)Spell$(0) in the $(item)Programmer$(0);$(br)$(li)Copy the $(thing)Spell$(0) into a $(item)Spell Bullet$(0);$(br)$(li)Load the $(item)Spell Bullet$(0) into your $(thing)CAD$(0) using the $(item)CAD Assembler$(0);$(br)$(li)Hold your $(thing)CAD$(0), point, and cast.$(p)In the next few pages, we'll walk you through this process.
When you open up your $(item)Spell Programmer$(0), you'll see a large grid-- this is where $(thing)Spells$(0) are made, and where the magic happens.$(p)$(thing)Psi$(0)'s programming system isn't $(o)quite$() a traditional, complex one; instead, $(thing)Spells$(0) are composed of simple actions, called $(thing)Tricks$(0), executed in order.$(p)The whole mod centers around simply getting $(thing)Tricks$(0) to do what you want them to.
$(thing)Psi$(0)'s $(thing)Spells$(0) are all created on the $(item)Programmer$(0)'s grid from $(thing)Spell Pieces$(0); you can add as many pieces of as many types to a grid as you want, though not all arrangements of $(thing)Spell Pieces$(0) will produce valid $(thing)Spells$(0).$(p)To add a piece to the grid, right-click where you want the piece to go, and select from the menu of pieces that pops up.
When selecting from the menu of $(thing)Spell Pieces$(0), you can hover over one to see its name, and click on it to place it in the grid.$(p)Don't worry about the myriad of pieces that appear for you; you can simply type to search for specific pieces, and press Enter to place the first search result.$(p)You can hold Shift and hover over the "?" button on the bottom-right to see the full list of shortcuts.
Start by placing the piece called $(item)Trick: Debug$(0) anywhere on the grid.$(p)As mentioned before, $(thing)Tricks$(0) like this one are the $(thing)Spell Pieces$(0) responsible for interacting with the world.$(p)This is the simplest $(thing)Trick$(0), only saying something in your chat, but $(thing)Tricks$(0) can use your $(thing)Psi$(0) energy to do a wide variety of things.
Next, select a grid piece $(l)adjacent$() to your $(item)Trick: Debug$(0), and place the piece called $(item)Selector: Caster$(0) there.$(p)$(thing)Selectors$(0) are the $(thing)Spell Pieces$(0) that provide information about the surrounding world to $(thing)Spells$(0).$(p)This particular piece represents you, the eventual caster of this spell, and is probably one you will use quite often, as it's a natural starting-point for your spells.
Most non-$(thing)Selector$(0) $(thing)Spell Pieces$(0) (and, in fact, some $(thing)Selectors$(0) as well) need $(l)parameters$(), which tell the pieces what to perform their actions on.$(p)For example, we know that $(item)Trick: Debug$(0) prints something out; its first parameter tells it $(o)what$() to print.$(p)$(o)Parameters also have $(l)types$()$(o), but we'll worry about those in a later tutorial.$()
Left-click your $(item)Trick: Debug$(0) piece; you should see a panel appear on the left-hand side with two rows, each with a label and several small arrows. These two rows represent the two parameters that $(item)Trick: Debug$(0) takes.$(p)Ignore the row labeled "Number" for now (it'll be explained in more detail later); just know that the dot in the center means it's optional, and that for a spell to function all $(o)non$()-optional parameters must be filled.
Look at the arrows in the row labeled "Target," and select the one corresponding to where you placed $(item)Selector: Caster$(0) (for example, if you placed it to the right of $(item)Trick: Debug$(0), select the rightmost arrow pointing left), so it appears that the $(thing)Selector$(0) piece is pointing towards the $(thing)Trick$(0) piece.$(p)This will make the $(thing)Trick$(0) use the $(thing)selector$(0) as its Target parameter.
At this point, the X in the upper-left hand corner of the $(thing)Programmer$(0) should have turned into a check-mark (if it's not, you can hover over the X to see the problem with the spell to try to correct it.)$(p)A check-mark means that the spell in the grid is valid, and can be copied into $(item)Spell Bullets$(0) and cast.$(p)And that's exactly what we'll do in $(l:basics/tutorial_2)$(item)the next tutorial$(0)$(/l)!
@IMAGE B(tutorial_1_spell): Your spell should look something like this
__END__

To add a piece to the grid, right-click any part of it, and select from the pieces that come up.$(p)As you can see at the bottom, you have two available pieces. Once you have more, you'll be able to assemble them to create spells in a myriad of different ways, but for now, let's just focus on these two. The pieces you have available are the \"Selector: Caster\" and the \"Trick: Debug\". Tricks are the most important part of a spell, they are the means through which the spell interacts with the world. In our case, the Debug trick is an exception, as it just writes a value to the player's chat.$(p)Start off by placing them in your grid adjacent to eachother. When you left-click on your \"Selector: Caster\", you'll find that nothing special happens. However, when you do the same for your \"Trick: Debug\", a panel appears on the left where you can configure the inputs of this piece, the piece's \"parameters\". Parameters are info that goes to the piece, in order to allow it to do its thing. Our Debug trick sends out something to chat, so we need to know what that thing is. Take the Target parameter, and click one of the arrows, so that your \"Selector: Caster\" looks like it's pointing towards the \"Trick: Debug\". If you hold shift while looking at a piece, you can see what types of parameters it needs or what type it sends out. This is useful, so you can pair the right pieces together. Ignore the Number parameter for now; we'll cover it later.$(p)If you've done this correctly, you should see the X on the top turns into a checkmark, and some values appear on the right. Don't worry about those for now. If you're still seeing the red X, hover over it to see what the error is and try to correct it.$(p)Now we need to take the program you've made and send it over to your CAD. Grab your Spell Bullet and right-click your Spell Programmer with it. You'll hear a beep boop, and are now ready to load the bullet. Place your new CAD into your Assembler, into the big slot on the top-left, and you'll see some slots below it open up. Place your bullet in there, then you can take your CAD out. To pick a spell, hold your CAD and hold the same key you use to access this menu. NOTE: You may only have a single CAD on you. If you have more than one in your inventory, spells will not work.$(p)In order to level up, you need to create and cast a spell that contains the piece highlighted in red on the last thing you've learned. In our case, we need a spell with a \"Trick: Debug\" to be able to level up. Right-click your CAD with your bullet loaded and you should be ready to move on. If you want to create more Psidust, simply pick a slot that has no bullet in it. //TODO cleanup

#tutorial_2+ Tutorial (2)
Let's talk about the \"Number\" parameter we saw last time. You'll notice that parameter has an extra option in the center. That means the parameter is optional. By selecting the center, you can disable it.$(p)In our case, the \"Number\" parameter is simply a label of sorts, it can be useful if we have a more complex spell where we have multiple things being sent out to chat. It requires a Number, so let's give it one. We now have access to a \"Constant: Number\" piece. Add the \"Number\" parameter to your Debug piece and add a \"Constant: Number\" piece to your grid and connect it to your Debug piece. You can set the number by clicking on the piece and just typing the number with your keyboard.$(p)Now that we're dealing with multiple parameters, you can assume that in a more complex grid, not everything will be adjacent just as it currently is. That's where Connectors, another piece introduced here, come in. Connectors do exactly as the name says, and allow a piece to connect to another, they're like a wire. You can put a connector adjacent to a piece, and it'll transfer whatever that piece contains to whatever is on the end of the connector. You can make connectors line up with other connectors if what you need is far away. A single connector line can send the object that points to it to any other pieces that are oriented to tap on to it.$(p)Remember, to level up, you need to make a spell using the piece highlighted in red, so you need to use your \"Constant: Number\" piece, preferably alongside the Debug trick from Tutorial 1, but give Connectors a try as well, they'll be very important later!<br>Since this is your second tutorial, it's worth noting that should you wish to re-read older tutorials, they're available at the end of the left list, so just scroll down to find them. //TODO cleanup

#tutorial_3+ Tutorial (3)
Ok, ok. I know what you're thinking. \"This is boring, when do we start doing cool stuff?\" Well... now!$(p)It's time we introduce a Trick that actually does some sort of interaction with the world. Bring in \"Trick: Add Motion\". This trick, as you'd expect, adds movement to an entity. It takes an Entity, a Vector and a Number Constant. As you should've figured out already, \"Selector: Caster\" returns an Entity (Player), which, if used with your new \"Trick: Add Motion\", could add movement to your player character. The Vector is the direction in which you want the movement to be added, and the Number Constant is the speed you want to apply. Obviously, you can get this number using \"Constant: Number\".$(p)We don't have any great tricks up our sleeve to get a vector for the trick, but we do have \"Operator: Entity Look\", which gets us a vector corresponding to the direction the player is looking. If we pass that into our \"Trick: Add Motion\", the player character will move in the direction they're looking. As for the number, go with 3 for now. You can change it of course, but 3 is a good one. You'll notice that when you modify the value of the constant, the numbers on the right change. These numbers are relevant now. They are the stats of your spell. The stats of your spell match up to those of your CAD, and if any of your spell's stats are below the stats of your CAD, you won't be able to cast the spell.$(p)From the top to bottom, the stats are as follows:<br>\u00a7nComplexity\u00a7r: The amount of actions your spell has. Constants, connectors and Debug Tricks aren't counted.<br>\u00a7nPotency\u00a7r: The power of your spell. As you increase the power of your tricks, this goes up.<br>\u00a7nCost\u00a7r: The amount of Psi (the energy bar on the right of your screen) your spell is going to consume. This doesn't match up to any CAD stat, but is affected by the CAD's Efficiency. The actual value that is consumed is the one inside parenthesis. The higher the Efficiency of your CAD, the less extra you'll have to pay.<br>\u00a7nProjection\u00a7r: The amount of Tricks in your spell. Debug Tricks aren't counted.<br>\u00a7nBandwidth\u00a7r: The width or height of your spell, whichever is the highest. If you find you're going over this, try making your spell more compact. //TODO cleanup

#tutorial_4+ Tutorial (4)
Do you like explosions? Of course you do. Let's make a spell that explodes the block the player is looking at.$(p)For this, we are going to need \"Trick: Explode\". This takes a Vector and a Number Constant. Similarly to our \"Trick: Add Motion\", this constant is the power of the trick. The vector is where you want the explosion to happen. We already used \"Operator: Entity Look\", but that gives us a vector that's very short. If we used that, the explosion would happen in our face! Instead, we want to use an \"Operator: Vector Raytrace\".$(p)This operator takes a position and a ray, both vectors. From the position, which will be the player's position, obtainable through \"Operator: Entity Position\", the operator extends the \"Ray\" parameter vector until it collides with a block in the world. (Note: \"Operator: Entity Position\" returns a vector whose Y value is 1.6 higher than usual if used on a player.)<br>Therefore, if we use it alongside \"Operator: Entity Look\", we can find out where the player is looking at and create our explosion there. One thing we have to keep in mind is the fact that spells are effective to a range of 32 blocks from their focal point, in our case, the player casting the spell. Our explosion can't be farther than 32 blocks away from the player.$(p)Lastly, the \"Error Suppressor\" piece does exactly as it describes. If something goes wrong while casting your spell, you'll get an error in your chat telling you what went wrong. Sometimes that can get annoying, when you know a spell has a possible failiure state. In that case, throw in an \"Error Suppressor\" anywhere in your spell's grid and all the errors will be gone.$(p)This will be your last basic tutorial, from here you'll be able to pick between various things to pick as you level up. Have fun! //TODO cleanup


##components icon:cad_assembly_iron Materials & Components

#Psidust
// TODO

#Psimetal
// TODO

#Psigem
// TODO

#Ebony & Ivory
// TODO

#Assemblies
// TODO

#Cores
// TODO

#Sockets
// TODO

#Batteries
// TODO

#Colorizers
// TODO


##items icon:spell_bullet Items

#Spell Bullet
//TODO

#Projectile Spell Bullet
//TODO

#Loopcast Spell Bullet
//TODO

#Circle Spell Bullet
//TODO

#Grenade Spell Bullet
//TODO

#Charge Spell Bullet
//TODO

#Mine Spell Bullet
//TODO

#Spell Detonator
//TODO

#Psimetal Exosuit
//TODO

#Exosuit Sensors
//TODO

#Psimetal Tools
//TODO

#Vector Ruler
//TODO

#Spell Drive
//TODO


##pieces icon:textures/spell/trick_debug.png Spell Pieces

#The Basics
// TODO rehash Debug, Explode

#Numbers 101
Numbers are an essential component to Spell Programming. These are basic arithmetic operators that can be used for math in spells.$(p)If you don't have anything that uses numbers yet, try adding up two constants for a Debug trick.$(p)Make sure to take note the difference between \"Number\" and \"Number Constant\" when holding shift on any spell piece. A parameter that requires a \"Number Constant\" can't take a \"Number\", but a parameter that requires a \"Number\" can take a \"Number\" or a \"Number Constant\". //TODO cleanup

#Vectors 101
Vectors are an essential component to Spell Programming. Many vectorial operations here included are very elementary, such as sum or subtraction. The red piece of this set, \"Operator: Vector Construct\" creates a Vector given the X, Y and Z coordinates. Try using it with \"Trick: Add Motion\" to make a spell that makes you jump up.$(p)Regarding another complicated piece in this group: A Cross Product of two vectors is a vector that is perpendicular to both. You can make use of this to get a vector that goes to the player's side, by executing the Cross Product of the player's look vector and (0, 1, 0), which you can get with \"Operator: Vector Construct\". //TODO cleanup

#Entities 101
Entities are an essential component to Spell Programming. While using components like \"Selector: Caster\" it's possible to get the person casting the spell, the pieces included here allow for targeting other entities in the world.$(p)You can make use of the pieces here to create spells that affect other entities. Try using it with \"Trick: Add Motion\" on them instead of yourself. //TODO cleanup

#Alternative Casting
Aside from the standard Spell Bullets, alternate spell bullets can be created, that allow for spells to be casted in different ways.$(p)Projectile Spell Bullets, instead of casting the spell straight away, emit a projectile, that casts the spell upon colliding with something. Grenade Spell Bullets function similarly to the Projectile ones, but create a \"grenade\" style projectile that is affected by gravity and explodes (casting the spell) after 3 seconds of being fired. Charge Spell Bullets work like the Grenade ones, but will only cast the spell when ignited by a Spell Detonator item. Mine Spell Bullets also work like the Grenade ones, and will cast the spell once an entity walks into them and walks out. Circle Spell Bullets create a Spell Circle where the caster is looking, the spell is cast on the position of the spell circle 20 times over the course of 5 seconds.$(p)The usage of alternative bullets like these requires the introduction of the \"Selector: Focal Point\" piece, which selects the Focal Point of the spell. For normal Spell Bullets, the Focal Point is the player itself, whereas for Projectile (or any of the derivate) Spell Bullets, the Focal Point is the projectile entity. Naturally, for Circle Spell Bullets, the Focal Point will be the spell circle. \"Selector: Caster\" always remains unchanged.$(p)The 32 block limit on spells exists around the Focal Point, so these alternate spell bullets allow for spell effects to happen farther away. Furthermore, a spell can always affect its Caster, even if the Caster is outside the 32 block radius of the Focal Point. The Spell Detonator item can only detonate charges in a 32 block radius.$(p)The other piece of the group, \"Selector: Ruler Vector\" is to be used with a Vector Ruler. This item allows you to define a vector in world. Hold shift and right-click a block to set the source and right-click another normally to set the destination. When you use the selector, it gets the vector you selected. In the case that you have multiple Vector Rulers on you, the first one is used, hotbar taking priority. //TODO cleanup

#Blockworks
Working with blocks is an essential skill. As blocks are aligned to a grid in the world, you can refer to a block's position via a vector, so knowledge of the vector concepts is rather important for understanding the contents of Blockworks.$(p)Two of the most basic pieces in this group are the \"Place Block\" and \"Break Block\" tricks. They take a vector and either place or break a block in the position specified. For the case of \"Trick: Place Block\", the block placed is the one to the right of the player's CAD, on the hotbar. Of course, one of those blocks is taken from the player's inventory. Knowing where to place or break a block is easy, as it can be done through \"Operator: Vector Raycast\".$(p)There is something we have to keep in mind, however. A standard implementation of \"Operator: Vector Raycast\" gives us the block the player is looking at, and we can't place a block there, as one already exists! To remedy that, we can combine our \"Operator: Vector Raycast\" with the new \"Operator: Vector Axis Raycast\" piece, which gives us a vector equivalent to the side of the block we're looking at, so if we're looking at the top of the block, it'll give us an axial vector (0, 1, 0). We can then sum that, using \"Operator: Vector Sum\" to the result of our raycast to get where to place our block!$(p)In a similar fashion, \"Operator: Entity Axial Look\" gets an axial vector equivalent to the axis the player is looking at. Think of the \"Facing\" value in your F3 menu. \"Operator: Entity Axial Look\" does something similar. Say \"Facing\" would say \"east\", then \"Operator: Entity Axial Look\" would get you a vector (1, 0, 0). This, unlike the \"Facing\" value also detects when you're looking up and down.$(p)The other two tricks available here are \"Trick: Place Block Sequence\" and \"Trick: Break Block Sequence\", the latter being the red piece for this group. These tricks break or place a line of blocks. Similarly to the standard break and place tricks, they require a position to start off, but they also require another Vector, \"Target\", that defines the line in which it should interact. So if \"Target\" is (0, 4, 0), it'll place or break 4 blocks up, starting from the value of \"Position\". The last component to these tricks is \"Max\", this is a number constant for the maximum amount of blocks the trick is allowed to break or place. Since the vector requirements aren't constant, this works as means of calculating the Potency and Cost of the trick. The higher you set it, the more the spell will cost.$(p)The last piece in this group is \"Operator: Vector Project\". Vector Projection is a somewhat complex topic, so this will only explain one of the potential uses for it, that being projecting a vector onto an axis. Imagine you want to make a spell that places blocks from your position in the world to the position you're looking at, but in a straight line aligned to the side of the block you're looking at (using \"Operator: Vector Axis Raycast\"). You start off by getting the vector that you want to place blocks on, for using \"Trick: Place Block Sequence\", but if you're diagonal to the block, you may get something like (3, 2, 4). That's not a straight line! We can use \"Operator: Vector Project\" to project that into the axis of the side you're looking at, say, (0, 0, 1). So our \"Vector A\" is (3, 2, 4) and our \"Vector B\" is (0, 0, 1). Applying the projection leaves us with (0, 0, 4). If our \"Vector B\", was, for example, (1, 0, 0), we'd get (3, 0, 0). For the case where an axial vector is used in B, Vector Projection strips any parts of A that are 0 in B. We can then do our straight line.$(p)As the red piece in this group is \"Trick: Break Block Sequence\", you won't need anything too crazy for the most part. Try making a spell that brings down an 8 block high column, so you can \"treecapitate\". //TODO cleanup

#Psimetal Infusion
Psimetal is an important component to creating Casting Assistance Devices with better Psi conduction. The \"Trick: Infusion\" piece executes a release of psionic energy similar to that of a cast with no bullets, except more concentrated and focused.$(p)The piece takes no parameters, and functions the exact same manner as infusing Redstone to create Psidust does. To infuse Psimetal, drop Gold Ingots around, and cast a spell with \"Trick: Infuse\".$(p)Psimetal can not only be used to create more powerful CAD components, but also to create Spell Drives. Spell Drives function as a method of storing and transporting spells between various Programmer blocks. To write a Spell onto a Spell Drive, simply hold shift and right-click it on the Spell Programmer. After the drive has a spell, doing the same thing will set the spell on the programmer instead. To remove the spell from the drive, hold shift and right-click into the air.$(p)Lastly, Spell Drives can be copied by placing an empty one and a written one together in a crafting grid. //TODO cleanup

#Movement Advances
Movement and transport is a topic already addressed via the usage of \"Trick: Add Motion\". This group includes pieces that improve on that concept.$(p)\"Trick: Blink\" is the red piece of this group, and all it does is simply teleport the target entity forwards in the direction they're looking with a set maximum distance. A negative value will teleport the entity backwards. \"Trick: Mass Blink\" does the same as \"Trick: Blink\", but focused on an Entity List, having all of them be affected by the trick.$(p)\"Trick: Mass Add Motion\" is self-explanatory; it's an Entity List version of \"Trick: Add Motion\", adding the same motion to every entity in the list.$(p)Lastly, \"Trick: Mass Exodus\" moves every entity in an Entity List to a given position, with the given speed. Negative speed will move them away. //TODO cleanup

#Loopcasting
Loopcasting is a style of magic defined by the usage of Loopcast Spell Bullets. When a spell is cast from a Loopcast Spell Bullet, it executes as if it were cast from a normal one, but also puts the player into a \"loopcasting\" state, where, until they unequip their CAD, will continuously cast the same spell at a rate of 4 times a second. The advantage of loopcasting is the fact that the initial cooldown to psi regeneration is only applied on the first spell in full. For each subsequent cast, the cooldown will be much shorter than usual, so, given a caster with a high enough level to sustain psi regeneration to cover the cost of a spell, said spell can be endlessly loopcasted.$(p)The red piece of this group is \"Selector: Loopcast Index\". This piece selects the amount of times a spell has been loopcasted. For the initial cast this will be 0, and will be incremented once for every subsequent loopcast. This can be used alongside \"Operator: Modulus\" and \"Operator: Integer Division\" to alter how the spell functions every time it's cast.$(p)\"Operator: Integer Division\" does exactly as it says on the tin, and executes division of the integer parts of the two numbers. \"Operator: Modulus\" calculates the remainder of the division of the integer parts of the two numbers. Using these pieces, it's possible to do things such as digging undergound bunkers in any given size.$(p)\"Selector: Loopcast Index\" also works with Circle Spell Bullets, returning the amount of times the spell has been cast by the spell circle, up to 20. //TODO cleanup

#Block Movement
The ability to move blocks isn't as important as the ability to break and place them, but under some cases can come in handy.$(p)The red piece of this group, \"Trick: Move Block\" takes a position for a block in the world and moves it given the target vector. The target vector must be axial, if it isn't, the trick will fail.$(p)The other piece, \"Trick: Collapse Block\", simply collapses a block as if it were sand or gravel.$(p)Both these tricks will fail on complex blocks (also known as Tile Entities) or blocks that can't be harvested with Silk Touch. //TODO cleanup

#Elemental Arts
What is a system that allows for manipulation of the world's properties if it didn't include some good old fashioned elemental themed magic?$(p)This group contains Tricks for the four elements. The red piece of this group is \"Trick: Smite\", which creates a lightning bolt at the position passed in. The other tricks also do things of the sort.$(p)The group also contains \"Operator: Random\", a piece that will generate a random number between 0 (inclusive) and the number passed in (exclusive). This can be used alongside Loopcast or Spell Circle spells in many ways. For example, one can create a spell that would use \"Trick: Overgrow\" to mass bone meal a plantation. //TODO cleanup

#Greater Infusion
The ability to infuse Diamonds into Psigems is very important in the progress of spellslinging. Using Psigems, stronger CAD components can be created. Similarly to \"Trick: Infusion\", \"Trick: Greater Infusion\" will infuse nearby Diamonds, turning them into Psigems.$(p)Furthermore, \"Trick: Ebony And Ivory\" will infuse Coal into an Ebony Substance and Nether Quartz into an Ivory Substance, both of which can be combined with a Psimetal Ingot to create the respective alloy. These alloys can later be used to create stronger CAD Assemblies. \"Trick: Ebony And Ivory\" can only be used while in the End. //TODO cleanup

#Tool Casting
Psimetal and Psigems can be crafted into a Toolset: Shovel, Pickaxe, Axe and Sword.$(p)These tools can be socketed with up to 3 Spell Bullets. When their relative action is executed, that being breaking a block for tools or attacking a mob for the sword, the selected spell is activated. The spell in a Psimetal tool is selected the same way as a CAD. A fourth slot is also shown in the radial menu in case one wants to disable the spells of the tool entirely. Psimetal tools will slowly regenerate and restore their damage using the player's Psi energy, in bursts, as long as the tool isn't the item currently in the player's hand.$(p)Spells in a tool aren't casted by the tool, but rather by the CAD, therefore, the limitations imposed by the CAD's stats still stand.$(p)This group introduces a few pieces that can be used in conjunction with the tools. The red piece of this group, \"Selector: Block Broken\" is meant to be used with tools, and gets you a vector respective to where you broke the block in the world. \"Selector: Block Broken Side\" gets the side in which you broke that block.$(p)Lastly \"Selector: Attack Target\" does exactly as it sounds, it gets you the entity you attacked with a sword when the spell is casted. It can also be used with Projectile Spell Bullets, to get the entity that the projectile collided against, if any. //TODO cleanup

#Positive Effects
The ability to apply effects to entities is a must of any magical spellbook worth its weight. Luckily, you are not making spells with a spellbook, but you can still apply effects anyway.$(p)All of the pieces in this group will apply the respective potion effect to the target entity, for the target time (in seconds). If the piece also has a Power parameter, that defines the level of the effect to apply.$(p)So, for example, \"Trick: Speed\" with Time 20 and Power 2 would apply a Speed II effect for 20 seconds to the target entity. //TODO cleanup

#Negative Effects
As to be expected, after Positive Effects come Negative Effects.$(p)There isn't much to say here, really. Everything in this group works exactly as expected. Have fun. //TODO cleanup

#Exosuit Casting
Naturally, the method of casting following a tool set would be an armor set. You can create the Psimetal Exosuit using... you guessed it, Psimetal, as well as some Psigems. All the armor pieces of the set can be socketed with bullets, similarly to the Psimetal tools. Each piece handles a given \"event\", such as taking damage, or jumping. Whenever that event happens, the spell in the selected bullet will be cast.$(p)The events are as follows:<br>\u00a7nHelmet\u00a7r: Sensor Based (read on).<br>\u00a7nChestplate\u00a7r: Player taking damage.<br>\u00a7nLeggings\u00a7r: Every tick.<br>\u00a7nBoots\u00a7r: Player jumping.$(p)The Helmet can have Exosuit Sensors attached to it, by combining the two items in a crafting grid. Only one sensor can be attached at a time. The sensor can be removed by placing the helmet back on the crafting grid. There's a few sensors, such as the Light sensor, that triggers when the player enters the darkness, or the Stress sensor, that triggers when the player reaches low HP. Check them out at your leisure.$(p)To control the exosuit, you need to create an Exosuit Controller. This item allows you to modify the selected bullets in each piece directly from your hand. Simply use your typical bullet selection hotkey with it equipped to bring up a menu with the ability to change multiple slots. Use the left and right mouse buttons to select which item is being changed, it works as usual after that. You can also hold shift and right-click the Exosuit Controller to instantly disable all the effects of your armor.$(p)Moving on to the pieces. The group contains various selectors you can use to help your Exosuit casting. The red piece of the group is \"Selector: Time\". This returns the CAD's time, kind of like its \"system clock\", in ticks. It constantly increments. It can be useful if you want to make something that works differently depending on the time. You don't need an exosuit to use it.$(p)The other two pieces in the group, \"Selector: Attacker\" and \"Selector: Damage Taken\" are to be used with the Exosuit Chestplate. The first selects the entity that attacked you, and the second the amount of damage you took. //TODO cleanup

#Trigonometry
This group includes operators relevant to trigonometric functions. The red piece of this group: \"Constant: Pi\" is exactly what it says on the tin, a constant that gives you the value of Pi.$(p)The group includes elementary trigonometric operations: sin, cos, asin and acos. The latter two being the inverse operators of sin and cos, also known as \"sin^-1\" or \"cos^-1\".$(p)Lastly, \"Operator: Vector Dot Product\" gives you the Dot Product of two vectors, the product of the two vectors' magnitudes and the cosine of the angle between them. Using \"Operator: Arc Cosine\" on the result will allow you to get the angle between two vectors. //TODO cleanup

#Smeltery
The pieces included in this group are very simplistic in the way they function, as both revolve around the concept of smelting things into other things as if they were put in a furnace.<br>\"Trick: Smelt Item\" will smelt a dropped item (Entity) in the world into its smelted counterpart, one item at a time.$(p)\"Trick: Smelt Block\" will smelt a block in the world into its smelted version, provided it's also a block. So while Cobblestone may be turned into Stone, Wood can't be turned into Charcoal. //TODO cleanup

#Flow Control
Flow Control is a somewhat complex subject. All the pieces here included allow for a spell to function in wildly different manners from what was available in your arsenal before. However, understanding how to properly use these pieces requires knowledge of the very internals of the spellcasting system. There are a few basic rules to be taken in mind to properly understand these concepts:<br>1. Spells execute in the order that the arrows drawn in the Spell Programmer point towards.<br>2. Any given piece's value will only be evaulated once. Any further pieces that require its value will just get the value evaluated the first time. For example, 3 instances of \"Trick: Debug\" pointing to the same \"Operator: Random\" will all print out the same value, as the random output will only be evaluted once.<br>3. A piece will only be evaluated when another piece requires its value. These chains are triggered by the Trick pieces.<br>4. Tricks are always executed from left to right and top to bottom. Therefore, a Trick in the second row will always be executed after a trick in the first.$(p)With that in mind, let's start off with the red piece of this group, \"Trick: Sleep\". This piece causes the spell to delay any further execution for the amount of ticks passed in. Knowing the order in which tricks execute, thanks to rule 4, putting this in the right place shouldn't be too hard. For those unaware, a Tick is a 1/20 fraction of a second. So if you wish to delay further processing of a spell by half a second, you would use 10 as the \"Time\" parameter. \"Trick: Sleep\" does not add any Projection to your spell, but does add Potency.$(p)\"Trick: Evaluate\" is a trick that does absolutely nothing. Yes, you heard that right. This trick does nothing. It doesn't increment any stats on your spell either. Its only application is to make use of rule 2, and evaluate a value before a Sleep is executed, allowing you to, for example, get the position where an entity was, with \"Selector: Entity Position\", before the Sleep is applied, for a trick used after said Sleep.$(p)\"Trick: Die\" is a Flow Control piece in the proper sense of the term. It takes a simple Number parameter, and if that number lies between -1 (exclusive) and 1 (also exclusive) it'll stop the spell's execution right then and there. Any other values will have the spell continue as usual. This piece doesn't add Projection. A very simple way to put it to use is to utilize \"Selector: Sneak Status\", which convinentely gives you 0 if the caster is sneaking and 1 if they're not. Almost as if they were made to go together!$(p)\"Constant: Wrapper\" allows you to make use of Number type pieces for tricks that would otherwise require a Number Constant. As you should know by now, the constant value given to a trick allows for calculation of the various stats of the spell before you even cast it, this being the normal reason variable numbers can't be fed into a trick. \"Constant: Wrapper\" requires two numbers, a constant one and a normal one. The constant value given to the piece will be the one used for any statistical calculation, whereas the normal number will be the one used for when the spell is actually put into use. The normal number's value will be capped out at the value of the constant one during spell execution, to prevent any sort of tomfoolery. The normal number is also always converted to a positive or negative number, depending on the sign of the constant number, so that the signs of both numbers match. If the constant number is 0, the result of this evaluation is always 0, regardless of the value of the normal number. //TODO cleanup

#Block Conjuration
This group includes pieces that do exactly as advertised, they conjure blocks.$(p)The red piece of the group, \"Trick: Conjure Block\" creates a Conjured Block at the given position. A Conjured Block is a semi-transparent, physical block that can, optionally, if the \"Time\" parameter is specified, disappear from the world after a bit. If the \"Time\" parameter is used, it's specified in Ticks. For those unaware, a Tick is equivalent to 1/20th of a second, so if you want to make a block that disappears after half a second, set \"Time\" to 10 ticks.$(p)\"Trick: Conjure Light\" conjures a light source instead, one that can't be collided against. \"Trick: Conjure Block Sequence\" functions much like \"Trick: Place Block Sequence\", but creates Conjured Blocks instead. Both these pieces also include the very same \"Time\" parameter.$(p)The color of the Conjured Blocks created is equal to that of the Colorizer used in the CAD (or the default light blue in case none is present). Colorizers whose color changes, such as the Full-Spectrum colorizer will also reflect in the visuals of the Conjured Blocks. //TODO cleanup

#Eidos Manipulation
Eidos Spells allow for the caster to manipulate the space-time continuum in their favor.$(p)The red piece of this group, \"Trick: Eidos Reversal\" retraces the caster's steps, at double speed, for the amount of time (in seconds) specified. Only one Reversal may be active at a time, and after a Reversal is cast, the effect of any subsequent cast is only available until the point where the last one ended. Sneaking will stop an ongoing Reversal.$(p)The other trick piece of the group, \"Trick: Eidos Anchor\" creates an \"anchor\" effect on the caster. After the target amount of time (in seconds), the caster will be taken back to where their anchor was. Multiple casts of \"Trick: Eidos Anchor\" can be done, but only the last one will take effect.$(p)Lastly \"Selector: Eidos Changelog\" takes a single number parameter (let's call it n), and gives you the position in the n'th index of the Eidos Changelog starting from the end. In simpler terms, it gives you a vector equal to the position that the caster was n ticks ago. Remember that \"Trick: Eidos Reversal\" takes the caster back in the changelog, wiping out any info that would come after. \"Trick: Eidos Anchor\" does not modify the changelog. //TODO cleanup

#Detection & Focus
This group includes two types of pieces, as the title says: detection, and focus. The red piece of the group falls under the \"focus\" area, however, in order to understand it, the concept of Slot Focus must be introduced.$(p)An already known example of Slot Focus is the family of Place Block style tricks. These make use of the block directly to the right of your CAD. Slot Focus is the slot which tricks like these will use. It can be relative (to the position of your CAD) or absolute, can only be in the hotbar and goes from 1 to 9. By default, whenever a spell is cast, its value is \"Relative 1\", so it's 1 slot to the right of your CAD. If it was \"Relative -1\" it would be 1 slot to the left of your CAD. \"Absolute 3\" would be the third slot in your hotbar. It also loops around, so if you have your CAD on your last slot and the value is \"Relative 1\", it'll be your first slot.$(p)To set the focused slot, you can use \"Trick: Switch Focus Slot\", the red piece of this group. This takes one of 2 parameters. Both are optional and mutually exclusive, and if you don't define any, it'll set the focus to the default of \"Relative 1\". If you choose to set the \"Position\" parameter, it'll set an Absolute value, whereas the \"Shift\" parameter will set a Relative value. This allows you to, for example, build things with different blocks based on the circumstance. This trick only works for the current spell cast, and the focus will reset the next time a spell is cast (even if it's the same spell).$(p)The other two pieces in the group are set in the \"detection\" area. First, \"Selector: Item Presence\" takes an optional slot number (if not set it'll default to your Focused Slot), and returns the amount of items in that slot, 0 if it's empty, of course. Lastly, \"Selector: Block Presence\" takes a vector, to be used as coordinates in the world, and finds the block there, the value returned is 0 if there's no block or a replaceable block (like tall grass), 1 if it's a non-solid block and 2 if it's a solid block. //TODO cleanup

#Memory Management
This group introduces the ability for spells to harness Persistent Memory in one's CAD. A CAD can store Vector type values for use in future spellcasts. The amount of Vectors that can be stored is equal to the CAD's \"Sockets\" stat divided by 3, rounded down. This is refered to the amount of Memory Slots present in the CAD.$(p)The group includes two pieces, simple IO style pieces to read and write vectors to and from the memory. The red piece, \"Trick: Save Vector\" saves a vector to the target Memory Slot, whereas \"Selector: Saved Vector\" gets the vector saved in the Memory Slot defined by its only parameter. Memory Slots for these pieces start in 1, so a CAD with 3 memory slots would accept values 1, 2, and 3. Both pieces add Potency to the spell equivalent to the number of the slot used.$(p)One imperfection with these pieces is the fact that \"Trick: Save Vector\" \"locks\" the target Memory Slot when used, preventing any of the two pieces from interacting with that same Memory Slot in the current spell cast after it goes through, be that read or write. So if you need to read the value in the slot before you write something, make sure to keep the fundamental rules of Flow Control in mind, to make sure the read goes through before the write. //TODO cleanup

#Secondary Operators
As the name implies, this group includes mathematical operators that aren't quite as important as the \"primary\" ones, such as sum or subtract. This group is, really, just a mixed bag of all sorts of math or logic relates pieces that can be used to help with spell creation. We'll separate the pieces in two sets to make them easier to explain.$(p)The first set is related to powers. Including pieces like \"Operator: Square\", \"Operator: Power\", \"Operator: Square Root\" and even \"Operator: Logarithm\". Most of these operate in a pretty standard fashion, with not much to talk about, except \"Operator: Logarithm\". This piece, as the name implies, executes the logarithm of the number passed in. The piece takes an optional Base paramter, and will calculate the logarithm for that base. If no base is passed in, it'll default to base 10. There's also \"Constant: e\", if you feel like using that, for whatever reason.$(p)The second set is related to logic. It includes pieces that do rounding (to an integer), \"Operator: Ceiling\", \"Operator: Floor\" and \"Operator Round\", which respectively round up, round down and round depending on the fractional part of the number. It also includes \"Operator: Min\" and \"Operator: Max\". These are pretty simple. They, respectively, get the smallest number and the largest number between the various numbers passed in. //TODO cleanup
