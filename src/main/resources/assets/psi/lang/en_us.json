{
  "itemGroup.psi": "Psi",
  "psimisc.shift_for_info": "\u00a77Hold \u00a7bSHIFT\u00a77 for more info",
  "psimisc.component_type": "\u00a7aComponent Type\u00a77: %s",
  "psimisc.none": "(none)",
  "psimisc.stats": "Stats",
  "psimisc.socketing": "Socketing",
  "psimisc.keybind": "Psi Master Keybind",
  "psimisc.spell_selected": "\u00a7dSpell Selected\u00a77: %s",
  "psimisc": "Name:",
  "psimisc.compiled": "Compilation Successful",
  "psimisc.errored": "Compilation Errored",
  "psimisc.weak_cad": "Your CAD's Stats are too weak to cast this Spell.",
  "psimisc.canceled_spell": "Something prevented you from casting that Spell.",
  "psimisc.cancelled_cad_take": "Something prevented you from crafting the CAD.",
  "psimisc.constant": "Constant",
  "psimisc.next_page": "Next Page",
  "psimisc.prev_page": "Previous Page",
  "psimisc.config": "Config",
  "psimisc.not_your_programmer": "It seems like someone else is using this. Probably better not to mess with it.",
  "psimisc.cant_use_programmer": "You have no idea how to operate this.",
  "psimisc.level_display": "Level %d",
  "psimisc.level_info": "Level %d - Level Points: %d",
  "psimisc.level_info_creative": "Level %d (Creative) - Level Points: %d",
  "psimisc.locked": "Locked",
  "psimisc.requirements": "Requirements",
  "psimisc.learn": "Learn",
  "psimisc.levelup": "Level Up",
  "psimisc.wip": "Psi Beta | Not final!",
  "psimisc.bullet_type": "\u00a7bType\u00a77: %s",
  "psimisc.bullet_cost": "\u00a7bCost Multiplier\u00a77: %s%%",
  "psimisc.level_up_info1": "You have completed this group tutorial!",
  "psimisc.level_up_info2": "Unequip your CAD and press [%s] to go look at the next one!",
  "psimisc.import_from_clipboard": "Import from Clipboard",
  "psimisc.export_to_clipboard": "Export to Clipboard",
  "psimisc.must_hold_shift": "(Must be holding SHIFT)",
  "psimisc.malformed_json": "Import error: Malformed String: %s",
  "psimisc.missing_pieces": "Import error: Missing spell pieces used for import.",
  "psimisc.load_prompt": "Load?",
  "psimisc.spectator": "[Spectator Mode]",
  "psimisc.multiple_cads": "The other CAD in your inventory is interfering with your cast. You can only have one CAD on you at a time.",
  "psimisc.provider_mod": "\u00a77Addon: \u00a79%s",
  "psimisc.trick_pattern": "^Trick: (.+)$",
  "psimisc.programmer_help": "\u00a7aProgrammer Help",
  "psimisc.ctrl_windows": "Ctrl",
  "psimisc.ctrl_mac": "Cmd",
  "psimisc.enter_commit": "Press Enter to commit",
  "psimisc.semicolon_line": "Use ; to change line",
  "psimisc.programmer_coords": "Selected: [%d, %d] | Cursor: [%d, %d]",
  "psimisc.programmer_coords_no_cursor": "Selected: [%d, %d]",
  "psimisc.name": "Name",
  "psi.container.socketable": "Sockets",
  "psi.subtitle.bullet_create": "Spell stored",
  "psi.subtitle.cad_create": "CAD assembled",
  "psi.subtitle.spell_cast": "CAD casts",
  "psi.subtitle.loopcast": "CAD loopcasts",
  "block.psi.cad_assembler": "CAD Assembler",
  "block.psi.programmer": "Spell Programmer",
  "block.psi.psidust_block": "Psidust Block",
  "block.psi.psimetal_block": "Psimetal Block",
  "block.psi.psigem_block": "Psigem Block",
  "block.psi.black_psimetal_plate": "Dark Psimetal Plate",
  "block.psi.lit_black_psimetal_plate": "Dark Psimetal Flow Plate",
  "block.psi.white_psimetal_plate": "Bright Psimetal Plate",
  "block.psi.lit_white_psimetal_plate": "Bright Psimetal Flow Plate",
  "block.psi.ebony_psimetal_block": "Ebony Psimetal Block",
  "block.psi.ivory_psimetal_block": "Ivory Psimetal Block",
  "block.psi.conjured": "Conjured Block",
  "block.psi.psimetal_plate_white": "Bright Psimetal Plate",
  "block.psi.psimetal_plate_white_light": "Bright Psimetal Flow Plate",
  "item.psi.psidust": "Psidust",
  "item.psi.psimetal": "Psimetal Ingot",
  "item.psi.psigem": "Psigem",
  "item.psi.ebony_psimetal": "Ebony Psimetal Ingot",
  "item.psi.ivory_psimetal": "Ivory Psimetal Ingot",
  "item.psi.ebony_substance": "Ebony Substance",
  "item.psi.ivory_substance": "Ivory Substance",
  "item.psi.cad": "Casting Assistant Device",
  "item.psi.cad_assembly_iron": "Iron CAD Assembly",
  "item.psi.cad_assembly_gold": "Gold CAD Assembly",
  "item.psi.cad_assembly_psimetal": "Psimetal CAD Assembly",
  "item.psi.cad_assembly_ebony_psimetal": "Ebony Psimetal CAD Assembly",
  "item.psi.cad_assembly_ivory_psimetal": "Ivory Psimetal CAD Assembly",
  "item.psi.cad_assembly_creative": "Creative CAD Assembly",
  "item.psi.cad_core_basic": "Basic CAD Core",
  "item.psi.cad_core_overclocked": "Overclocked CAD Core",
  "item.psi.cad_core_conductive": "Conductive CAD Core",
  "item.psi.cad_core_hyperclocked": "Hyperclocked CAD Core",
  "item.psi.cad_core_radiative": "Radiative CAD Core",
  "item.psi.cad_socket_basic": "Basic CAD Socket",
  "item.psi.cad_socket_signaling": "Signaling CAD Socket",
  "item.psi.cad_socket_large": "Large CAD Socket",
  "item.psi.cad_socket_transmissive": "Transmissive CAD Socket",
  "item.psi.cad_socket_huge": "Huge CAD Socket",
  "item.psi.cad_battery_basic": "Basic CAD Battery",
  "item.psi.cad_battery_extended": "Extended CAD Battery",
  "item.psi.cad_battery_ultradense": "Ultradense CAD Battery",
  "item.psi.cad_colorizer_white": "White CAD Colorizer",
  "item.psi.cad_colorizer_orange": "Orange CAD Colorizer",
  "item.psi.cad_colorizer_magenta": "Magenta CAD Colorizer",
  "item.psi.cad_colorizer_light_blue": "Light Blue CAD Colorizer",
  "item.psi.cad_colorizer_yellow": "Yellow CAD Colorizer",
  "item.psi.cad_colorizer_lime": "Lime CAD Colorizer",
  "item.psi.cad_colorizer_pink": "Pink CAD Colorizer",
  "item.psi.cad_colorizer_gray": "Gray CAD Colorizer",
  "item.psi.cad_colorizer_light_gray": "Light Gray CAD Colorizer",
  "item.psi.cad_colorizer_cyan": "Cyan CAD Colorizer",
  "item.psi.cad_colorizer_purple": "Purple CAD Colorizer",
  "item.psi.cad_colorizer_blue": "Blue CAD Colorizer",
  "item.psi.cad_colorizer_brown": "Brown CAD Colorizer",
  "item.psi.cad_colorizer_green": "Green CAD Colorizer",
  "item.psi.cad_colorizer_red": "Red CAD Colorizer",
  "item.psi.cad_colorizer_black": "Black CAD Colorizer",
  "item.psi.cad_colorizer_rainbow": "Full-Spectrum CAD Colorizer",
  "item.psi.cad_colorizer_psi": "Psi CAD Colorizer",
  "item.psi.cad_colorizer_empty": "Drained CAD Colorizer",
  "item.psi.spell_bullet": "Spell Bullet",
  "item.psi.spell_bullet_active": "Programmed Spell Bullet",
  "item.psi.spell_bullet_projectile": "Projectile Spell Bullet",
  "item.psi.spell_bullet_projectile_active": "Programmed Projectile Spell Bullet",
  "item.psi.spell_bullet_loop": "Loopcast Spell Bullet",
  "item.psi.spell_bullet_loop_active": "Programmed Loopcast Spell Bullet",
  "item.psi.spell_bullet_circle": "Circle Spell Bullet",
  "item.psi.spell_bullet_circle_active": "Programmed Circle Spell Bullet",
  "item.psi.spell_bullet_grenade": "Grenade Spell Bullet",
  "item.psi.spell_bullet_grenade_active": "Programmed Grenade Spell Bullet",
  "item.psi.spell_bullet_charge": "Charge Spell Bullet",
  "item.psi.spell_bullet_charge_active": "Programmed Charge Spell Bullet",
  "item.psi.spell_bullet_mine": "Mine Spell Bullet",
  "item.psi.spell_bullet_mine_active": "Programmed Mine Spell Bullet",
  "item.psi.spell_drive": "Spell Drive",
  "item.psi.psimetal_shovel": "Psimetal Shovel",
  "item.psi.psimetal_pickaxe": "Psimetal Pickaxe",
  "item.psi.psimetal_axe": "Psimetal Axe",
  "item.psi.psimetal_sword": "Psimetal Sword",
  "item.psi.psimetal_shovel.broken": "Damaged Psimetal Shovel",
  "item.psi.psimetal_pickaxe.broken": "Damaged Psimetal Pickaxe",
  "item.psi.psimetal_axe.broken": "Damaged Psimetal Axe",
  "item.psi.psimetal_sword.broken": "Damaged Psimetal Sword",
  "item.psi.detonator": "Spell Detonator",
  "item.psi.psimetal_exosuit_helmet": "Psimetal Exosuit Helmet",
  "item.psi.psimetal_exosuit_chestplate": "Psimetal Exosuit Chestplate",
  "item.psi.psimetal_exosuit_leggings": "Psimetal Exosuit Leggings",
  "item.psi.psimetal_exosuit_boots": "Psimetal Exosuit Boots",
  "item.psi.psimetal_exosuit_helmet.broken": "Damaged Psimetal Exosuit Helmet",
  "item.psi.psimetal_exosuit_chestplate.broken": "Damaged Psimetal Exosuit Chestplate",
  "item.psi.psimetal_exosuit_leggings.broken": "Damaged Psimetal Exosuit Leggings",
  "item.psi.psimetal_exosuit_boots.broken": "Damaged Psimetal Exosuit Boots",
  "item.psi.exosuit_controller": "Exosuit Controller",
  "item.psi.exosuit_sensor_light": "Exosuit Light Sensor",
  "item.psi.exosuit_sensor_water": "Exosuit Water Sensor",
  "item.psi.exosuit_sensor_heat": "Exosuit Heat Sensor",
  "item.psi.exosuit_sensor_stress": "Exosuit Stress Sensor",
  "item.psi.exosuit_sensor_trigger": "Exosuit Detonator Sensor",
  "item.psi.vector_ruler": "Vector Ruler",
  "death.attack.psi-overload": "%s overflowed their Psionic Energy",
  "psi.component.assembly": "Assembly",
  "psi.component.core": "Core",
  "psi.component.socket": "Socket",
  "psi.component.battery": "Battery",
  "psi.component.dye": "Colorizer",
  "psi.cadstat.efficiency": "Efficiency",
  "psi.cadstat.potency": "Potency",
  "psi.cadstat.complexity": "Complexity",
  "psi.cadstat.projection": "Projection",
  "psi.cadstat.bandwidth": "Bandwidth",
  "psi.cadstat.sockets": "Sockets",
  "psi.cadstat.overflow": "Overflow",
  "psi.spellstat.complexity": "Complexity",
  "psi.spellstat.complexity.desc": "Amount of actions",
  "psi.spellstat.potency": "Potency",
  "psi.spellstat.potency.desc": "Power of the spell",
  "psi.spellstat.cost": "Cost",
  "psi.spellstat.cost.desc": "Psi cost on casting",
  "psi.spellstat.projection": "Projection",
  "psi.spellstat.projection.desc": "Amount of tricks",
  "psi.spellstat.bandwidth": "Bandwidth",
  "psi.spellstat.bandwidth.desc": "Spell width or height (largest)",
  "psi.bullet_type_basic": "Normal",
  "psi.bullet_type_projectile": "Projectile",
  "psi.bullet_type_loopcast": "Loopcast",
  "psi.bullet_type_circle": "Spell Circle",
  "psi.bullet_type_grenade": "Grenade",
  "psi.bullet_type_charge": "Charge",
  "psi.bullet_type_mine": "Mine",
  "psi.event.none": "(No Event Handler)",
  "psi.event.damage": "\u00a7bEvent\u00a77: Damage",
  "psi.event.tick": "\u00a7bEvent\u00a77: Tick",
  "psi.event.jump": "\u00a7bEvent\u00a77: Jump",
  "psi.event.low_light": "\u00a7bEvent\u00a77: Low Light",
  "psi.event.underwater": "\u00a7bEvent\u00a77: Underwater",
  "psi.event.on_fire": "\u00a7bEvent\u00a77: On Fire",
  "psi.event.low_hp": "\u00a7bEvent\u00a77: Low Health",
  "psi.event.spell_detonate": "§bEvent§7: Detonation",
  "psi.programmer_reference0": "\u00a7bKeybinds",
  "psi.programmer_reference1": "Delete Piece: \u00a7bDelete",
  "psi.programmer_reference2": "Clear Grid: \u00a7b%1$s-Shift-Delete",
  "psi.programmer_reference3": "Shift Grid: \u00a7b%1$s + Arrow Keys",
  "psi.programmer_reference4": "Rotate Grid: \u00a7b%1$s-Shift-Left/Right",
  "psi.programmer_reference5": "Mirror Grid Vertically: \u00a7b%1$s-Shift-Down",
  "psi.programmer_reference6": "Copy/Cut/Paste: \u00a7b%1$s-C/%1$s-X/%1$s-V",
  "psi.programmer_reference7": "Undo/Redo: \u00a7b%1$s-Z/%1$s-Y",
  "psi.programmer_reference8": "Open Panel/Select Piece: \u00a7bEnter",
  "psi.programmer_reference9": "Set Parameter: \u00a7bNumber Keys + Arrow Keys",
  "psi.programmer_reference10": "Set Comment: \u00a7b%1$s-D",
  "psi.programmer_reference11": "Switch Focus: \u00a7bTab",
  "psi.programmer_reference12": "Show Tooltip: \u00a7bAlt",
  "psi.programmer_reference13": "Move Cursor: \u00a7bArrow Keys",
  "psi.programmer_reference14": "Upload To Imgur: \u00a7b%1$s-Shift-Alt-G",
  "psi.programmer_reference15": "Share To Reddit: \u00a7b%1$s-Shift-Alt-R",
  "psi.programmer_reference16": "",
  "psi.programmer_reference17": "\u00a7bSearch Terms",
  "psi.programmer_reference18": "Accepting Type: \u00a7bin:(type)",
  "psi.programmer_reference19": "Outputting Type: \u00a7bout:(type)",
  "psi.programmer_reference20": "Name Begins With: \u00a7b(name)_",
  "psi.programmer_reference21": "Name Ends With: \u00a7b_(name)",
  "psi.programmer_reference22": "From Mod: \u00a7b@(name)",
  "psi.spellpiece.selector_caster": "Selector: Caster",
  "psi.spellpiece.selector_caster.desc": "Selects the person casting the spell",
  "psi.spellpiece.selector_focal_point": "Selector: Focal Point",
  "psi.spellpiece.selector_focal_point.desc": "Selects the Focal Point Entity of this spell",
  "psi.spellpiece.selector_nearby_items": "Selector: Nearby Items",
  "psi.spellpiece.selector_nearby_items.desc": "Selects items near the given position",
  "psi.spellpiece.selector_nearby_living": "Selector: Nearby Living",
  "psi.spellpiece.selector_nearby_living.desc": "Selects living beings near the given position",
  "psi.spellpiece.selector_nearby_enemies": "Selector: Nearby Enemies",
  "psi.spellpiece.selector_nearby_enemies.desc": "Selects enemies near the given position",
  "psi.spellpiece.selector_nearby_animals": "Selector: Nearby Animals",
  "psi.spellpiece.selector_nearby_animals.desc": "Selects animals near the given position",
  "psi.spellpiece.selector_nearby_projectiles": "Selector: Nearby Projectiles",
  "psi.spellpiece.selector_nearby_projectiles.desc": "Selects projectiles near the given position",
  "psi.spellpiece.selector_nearby_smeltables": "Selector: Nearby Smeltables",
  "psi.spellpiece.selector_nearby_smeltables.desc": "Selects smeltable items near the given position",
  "psi.spellpiece.selector_loopcast_index": "Selector: Loopcast Index",
  "psi.spellpiece.selector_loopcast_index.desc": "Selects the amount of loopcast executions done",
  "psi.spellpiece.selector_block_broken": "Selector: Block Broken",
  "psi.spellpiece.selector_block_broken.desc": "Selects the Block Broken (for Tools)",
  "psi.spellpiece.selector_block_side_broken": "Selector: Block Broken Side",
  "psi.spellpiece.selector_block_side_broken.desc": "Selects the side in which a Block was broken (for Tools)",
  "psi.spellpiece.selector_attack_target": "Selector: Attack Target",
  "psi.spellpiece.selector_attack_target.desc": "Selects the entity attacked by a caster",
  "psi.spellpiece.selector_sneak_status": "Selector: Sneak Status",
  "psi.spellpiece.selector_sneak_status.desc": "Selects if the caster is sneaking (1 if no, 0 if yes)",
  "psi.spellpiece.selector_time": "Selector: Time",
  "psi.spellpiece.selector_time.desc": "Selects the CAD's internal time (in ticks)",
  "psi.spellpiece.selector_attacker": "Selector: Attacker",
  "psi.spellpiece.selector_attacker.desc": "Selects the entity that attacked the caster",
  "psi.spellpiece.selector_damage_taken": "Selector: Damage Taken",
  "psi.spellpiece.selector_damage_taken.desc": "Selects the amount of damage the caster took",
  "psi.spellpiece.selector_ruler_vector": "Selector: Ruler Vector",
  "psi.spellpiece.selector_ruler_vector.desc": "Selects the vector defined by a Vector Ruler",
  "psi.spellpiece.selector_item_presence": "Selector: Item Presence",
  "psi.spellpiece.selector_item_presence.desc": "Selects the size of an inventory item stack",
  "psi.spellpiece.selector_block_presence": "Selector: Block Presence",
  "psi.spellpiece.selector_block_presence.desc": "Selects a block's presence and solidity",
  "psi.spellpiece.selector_saved_vector": "Selector: Saved Vector",
  "psi.spellpiece.selector_saved_vector.desc": "Selects a saved vector from CAD Memory",
  "psi.spellpiece.selector_eidos_changelog": "Selector: Eidos Changelog",
  "psi.spellpiece.selector_eidos_changelog.desc": "Selects a position from the Eidos Changelog",
  "psi.spellpiece.selector_list_filter": "Selector: Indexed Element",
  "psi.spellpiece.selector_list_filter.desc": "Selects an entity from an entity list with a given index",
  "psi.spellpiece.selector_nearby_charges": "Selector: Charge Density",
  "psi.spellpiece.selector_nearby_charges.desc": "Gets the number of charges around a given radius of a position",
  "psi.spellpiece.selector_nearby_players": "Selector: Nearby Players",
  "psi.spellpiece.selector_nearby_vehicles": "Selector: Nearby Rideables",
  "psi.spellpiece.selector_nearby_falling_blocks": "Selector: Nearby Falling Blocks",
  "psi.spellpiece.selector_nearby_glowing": "Selector: Glowing",
  "psi.spellpiece.selector_nearby_players.desc": "Selects players near the given position",
  "psi.spellpiece.selector_nearby_vehicles.desc": "Selects any nearby rideable entities",
  "psi.spellpiece.selector_nearby_falling_blocks.desc": "Selects any nearby falling blocks",
  "psi.spellpiece.selector_nearby_glowing.desc": "Selects nearby entities which are glowing or emitting light",
  "psi.spellpiece.selector_caster_energy": "Selector: Caster Energy",
  "psi.spellpiece.selector_caster_battery": "Selector: Caster Battery",
  "psi.spellpiece.selector_caster_energy.desc": "Gets the caster's current PSI energy level",
  "psi.spellpiece.selector_caster_battery.desc": "Gets the caster's current PSI battery level",
  "psi.spellpiece.selector_sucession_counter": "Selector: Success Counter",
  "psi.spellpiece.selector_sucession_counter.desc": "Gets the number of times a spell has been cast in armor",
  "psi.spellpiece.operator_sum": "Operator: Sum",
  "psi.spellpiece.operator_sum.desc": "A + B (+ C)",
  "psi.spellpiece.operator_subtract": "Operator: Subtract",
  "psi.spellpiece.operator_subtract.desc": "A - B (- C)",
  "psi.spellpiece.operator_multiply": "Operator: Multiply",
  "psi.spellpiece.operator_multiply.desc": "A * B (* C)",
  "psi.spellpiece.operator_divide": "Operator: Divide",
  "psi.spellpiece.operator_divide.desc": "A / B",
  "psi.spellpiece.operator_absolute": "Operator: Absolute",
  "psi.spellpiece.operator_absolute.desc": "Calculates the absolute value of a number",
  "psi.spellpiece.operator_inverse": "Operator: Inverse",
  "psi.spellpiece.operator_inverse.desc": "Calculates a number's inverse",
  "psi.spellpiece.operator_modulus": "Operator: Modulus",
  "psi.spellpiece.operator_modulus.desc": "A %% B (Integer)",
  "psi.spellpiece.operator_integer_divide": "Operator: Integer Divide",
  "psi.spellpiece.operator_integer_divide.desc": "A / B (Integer)",
  "psi.spellpiece.operator_random": "Operator: Random",
  "psi.spellpiece.operator_random.desc": "Random between 0 and the given number (exclusive)",
  "psi.spellpiece.operator_sin": "Operator: Sine",
  "psi.spellpiece.operator_sin.desc": "sin(A)",
  "psi.spellpiece.operator_cos": "Operator: Cosine",
  "psi.spellpiece.operator_cos.desc": "cos(A)",
  "psi.spellpiece.operator_asin": "Operator: Arc Sine",
  "psi.spellpiece.operator_asin.desc": "asin(A)",
  "psi.spellpiece.operator_acos": "Operator: Arc Cosine",
  "psi.spellpiece.operator_acos.desc": "acos(A)",
  "psi.spellpiece.operator_max": "Operator: Max",
  "psi.spellpiece.operator_max.desc": "Gets the largest value of those passed in",
  "psi.spellpiece.operator_min": "Operator: Min",
  "psi.spellpiece.operator_min.desc": "Gets the smallest value of those passed in",
  "psi.spellpiece.operator_square": "Operator: Square",
  "psi.spellpiece.operator_square.desc": "A^2",
  "psi.spellpiece.operator_cube": "Operator: Cube",
  "psi.spellpiece.operator_cube.desc": "A^3",
  "psi.spellpiece.operator_power": "Operator: Power",
  "psi.spellpiece.operator_power.desc": "A^B",
  "psi.spellpiece.operator_square_root": "Operator: Square Root",
  "psi.spellpiece.operator_square_root.desc": "sqrt(A)",
  "psi.spellpiece.operator_log": "Operator: Logarithm",
  "psi.spellpiece.operator_log.desc": "log(A) or logB(A)",
  "psi.spellpiece.operator_ceiling": "Operator: Ceiling",
  "psi.spellpiece.operator_ceiling.desc": "Rounds up a number to an integer",
  "psi.spellpiece.operator_floor": "Operator: Floor",
  "psi.spellpiece.operator_floor.desc": "Rounds down a number to an integer",
  "psi.spellpiece.operator_round": "Operator: Round",
  "psi.spellpiece.operator_round.desc": "Rounds a number to an integer",
  "psi.spellpiece.operator_entity_position": "Operator: Entity Position",
  "psi.spellpiece.operator_entity_position.desc": "Gets an Entity's position",
  "psi.spellpiece.operator_entity_look": "Operator: Entity Look",
  "psi.spellpiece.operator_entity_look.desc": "Gets an Entity's look vector",
  "psi.spellpiece.operator_entity_motion": "Operator: Entity Motion",
  "psi.spellpiece.operator_entity_motion.desc": "Gets an Entity's motion vector",
  "psi.spellpiece.operator_entity_axial_look": "Operator: Entity Axial Look",
  "psi.spellpiece.operator_entity_axial_look.desc": "Gets an Entity's look vector, aligned to an axis",
  "psi.spellpiece.operator_focused_entity": "Operator: Focused Entity",
  "psi.spellpiece.operator_focused_entity.desc": "Gets the entity the target entity is looking at",
  "psi.spellpiece.operator_vector_raycast": "Operator: Vector Raycast",
  "psi.spellpiece.operator_vector_raycast.desc": "Gets a localized raycast's result (max 32)",
  "psi.spellpiece.operator_vector_raycast_axis": "Operator: Vector Axis Raycast",
  "psi.spellpiece.operator_vector_raycast_axis.desc": "Gets a localized raycast's side axis (max 32)",
  "psi.spellpiece.operator_vector_sum": "Operator: Vector Sum",
  "psi.spellpiece.operator_vector_sum.desc": "A + B (+ C)",
  "psi.spellpiece.operator_vector_subtract": "Operator: Vector Subtract",
  "psi.spellpiece.operator_vector_subtract.desc": "A - B (- C)",
  "psi.spellpiece.operator_vector_multiply": "Operator: Vector Multiply",
  "psi.spellpiece.operator_vector_multiply.desc": "A * B",
  "psi.spellpiece.operator_vector_divide": "Operator: Vector Divide",
  "psi.spellpiece.operator_vector_divide.desc": "A / B",
  "psi.spellpiece.operator_vector_cross_product": "Operator: Vector Cross Product",
  "psi.spellpiece.operator_vector_cross_product.desc": "A x B",
  "psi.spellpiece.operator_vector_normalize": "Operator: Vector Normalize",
  "psi.spellpiece.operator_vector_normalize.desc": "Normalizes a Vector so its magnitude is 1",
  "psi.spellpiece.operator_vector_negate": "Operator: Vector Negate",
  "psi.spellpiece.operator_vector_negate.desc": "Negates a vector",
  "psi.spellpiece.operator_vector_magnitude": "Operator: Vector Magnitude",
  "psi.spellpiece.operator_vector_magnitude.desc": "Gets a vector's Magnitude",
  "psi.spellpiece.operator_vector_construct": "Operator: Vector Construct",
  "psi.spellpiece.operator_vector_construct.desc": "Constructs a Vector from XYZ parameters",
  "psi.spellpiece.operator_vector_extract_x": "Operator: Vector Extract X",
  "psi.spellpiece.operator_vector_extract_x.desc": "Extracts the X coordinate from a Vector",
  "psi.spellpiece.operator_vector_extract_y": "Operator: Vector Extract Y",
  "psi.spellpiece.operator_vector_extract_y.desc": "Extracts the Y coordinate from a Vector",
  "psi.spellpiece.operator_vector_extract_z": "Operator: Vector Extract Z",
  "psi.spellpiece.operator_vector_extract_z.desc": "Extracts the Z coordinate from a Vector",
  "psi.spellpiece.operator_vector_project": "Operator: Vector Project",
  "psi.spellpiece.operator_vector_project.desc": "Projects Vector A onto Vector B",
  "psi.spellpiece.operator_vector_dot_product": "Operator: Vector Dot Product",
  "psi.spellpiece.operator_vector_dot_product.desc": "A . B",
  "psi.spellpiece.operator_closest_to_point": "Operator: Closest to Point",
  "psi.spellpiece.operator_closest_to_point.desc": "Gets the closest entity in a list to a point",
  "psi.spellpiece.operator_random_entity": "Operator: Random Entity",
  "psi.spellpiece.operator_random_entity.desc": "Gets a random entity from a list",
  "psi.spellpiece.operator_list_add": "Operator: Add To List",
  "psi.spellpiece.operator_list_add.desc": "Adds target entity to a list",
  "psi.spellpiece.operator_list_remove": "Operator: Remove From List",
  "psi.spellpiece.operator_list_remove.desc": "Removes target entity from a list",
  "psi.spellpiece.operator_planar_normal_vector": "Operator: Planar Normal Vector",
  "psi.spellpiece.operator_planar_normal_vector.desc": "Creates a perpendicular vector to a given axial vector. Equivalent to rotating 2π/3 around <1,1,1>",
  "psi.spellpiece.operator_vector_rotate": "Operator: Rotate Vector",
  "psi.spellpiece.operator_vector_rotate.desc": "Rotates a vector around an axis",
  "psi.spellpiece.operator_gamma_function": "Operator: Gamma Function",
  "psi.spellpiece.operator_gamma_function.desc": "Γ(x), equivalent to (x+1)!",
  "psi.spellpiece.operator_list_size": "Operator: List Size",
  "psi.spellpiece.operator_list_union": "Operator: List Concatenation",
  "psi.spellpiece.operator_list_intersection": "Operator: List Intersection",
  "psi.spellpiece.operator_list_exclusion": "Operator: List Exclusion",
  "psi.spellpiece.operator_list_size.desc": "Gets the number of entities in a list",
  "psi.spellpiece.operator_list_union.desc": "Makes a list with all items from either list",
  "psi.spellpiece.operator_list_intersection.desc": "Makes a list with all items that are in both lists",
  "psi.spellpiece.operator_list_exclusion.desc": "Makes a list with all items that are in the first list but not the second",
  "psi.spellpiece.operator_root": "Operator: Root",
  "psi.spellpiece.operator_root.desc": "Takes the nth root of the number",
  "psi.spellpiece.operator_extract_sign": "Operator: Signum",
  "psi.spellpiece.operator_extract_sign.desc": "Extracts the sign from the input",
  "psi.spellpiece.constant_number": "Constant: Number",
  "psi.spellpiece.constant_number.desc": "Select and type to set value",
  "psi.spellpiece.constant_pi": "Constant: Pi",
  "psi.spellpiece.constant_pi.desc": "Returns the value of Pi",
  "psi.spellpiece.constant_e": "Constant: e",
  "psi.spellpiece.constant_e.desc": "Returns the value of e",
  "psi.spellpiece.constant_tau": "Constant: Tau",
  "psi.spellpiece.constant_tau.desc": "Returns the value of Tau",
  "psi.spellpiece.constant_wrapper": "Constant: Wrapper",
  "psi.spellpiece.constant_wrapper.desc": "A wrapper for a constant for stat calculation",
  "psi.spellpiece.connector": "Connector",
  "psi.spellpiece.connector.desc": "Connects stuff and things",
  "psi.spellpiece.cross_connector": "Cross Connector",
  "psi.spellpiece.cross_connector.desc": "Can connect two paths",
  "psi.spellpiece.error_suppressor": "Error Suppressor",
  "psi.spellpiece.error_suppressor.desc": "Suppresses errors thrown by the spell",
  "psi.spellpiece.vector_suppressor": "Suppressor: Vector",
  "psi.spellpiece.vector_suppressor.desc": "Replaces error vectors with 0 length vectors",
  "psi.spellpiece.trick_debug": "Trick: Debug",
  "psi.spellpiece.trick_debug.desc": "For testing. Prints out the target",
  "psi.spellpiece.trick_delay": "Trick: Sleep",
  "psi.spellpiece.trick_delay.desc": "Delays the spell for the amount of ticks passed in",
  "psi.spellpiece.trick_die": "Trick: Die",
  "psi.spellpiece.trick_die.desc": "Stops spell execution if target is within ]-1, 1[",
  "psi.spellpiece.trick_evaluate": "Trick: Evaluate",
  "psi.spellpiece.trick_evaluate.desc": "Evaluates a value. Does nothing with it",
  "psi.spellpiece.trick_add_motion": "Trick: Add Motion",
  "psi.spellpiece.trick_add_motion.desc": "Adds motion to target Entity",
  "psi.spellpiece.trick_explode": "Trick: Explode",
  "psi.spellpiece.trick_explode.desc": "Goes boom",
  "psi.spellpiece.trick_break_block": "Trick: Break Block",
  "psi.spellpiece.trick_break_block.desc": "Breaks a block",
  "psi.spellpiece.trick_break_in_sequence": "Trick: Break Block Sequence",
  "psi.spellpiece.trick_break_in_sequence.desc": "Breaks a sequence of blocks each the given Vector apart",
  "psi.spellpiece.trick_place_block": "Trick: Place Block",
  "psi.spellpiece.trick_place_block.desc": "Places a block (the one to the right of the CAD)",
  "psi.spellpiece.trick_place_in_sequence": "Trick: Place Block Sequence",
  "psi.spellpiece.trick_place_in_sequence.desc": "Places a sequence of blocks, placing each the given Vector apart",
  "psi.spellpiece.trick_infusion": "Trick: Infusion",
  "psi.spellpiece.trick_infusion.desc": "Infuses Gold into Psimetal, as well as Redstone into Psidust",
  "psi.spellpiece.trick_blink": "Trick: Blink",
  "psi.spellpiece.trick_blink.desc": "Blinks forward",
  "psi.spellpiece.trick_mass_blink": "Trick: Mass Blink",
  "psi.spellpiece.trick_mass_blink.desc": "Blinks everybody forward",
  "psi.spellpiece.trick_mass_add_motion": "Trick: Mass Add Motion",
  "psi.spellpiece.trick_mass_add_motion.desc": "Adds motion to all entities in target Entity List",
  "psi.spellpiece.trick_mass_exodus": "Trick: Mass Exodus",
  "psi.spellpiece.trick_mass_exodus.desc": "Moves all entities in target Entity List to target position",
  "psi.spellpiece.trick_move_block": "Trick: Move Block",
  "psi.spellpiece.trick_move_block.desc": "Moves a block by target (normalized) axial vector",
  "psi.spellpiece.trick_collapse_block": "Trick: Collapse Block",
  "psi.spellpiece.trick_collapse_block.desc": "Collapses a block, as if it were sand",
  "psi.spellpiece.trick_smite": "Trick: Smite",
  "psi.spellpiece.trick_smite.desc": "Calls down lightning at the given point",
  "psi.spellpiece.trick_blaze": "Trick: Blaze",
  "psi.spellpiece.trick_blaze.desc": "Creates fire at the given point",
  "psi.spellpiece.trick_torrent": "Trick: Torrent",
  "psi.spellpiece.trick_torrent.desc": "Creates water at the given point",
  "psi.spellpiece.trick_overgrow": "Trick: Overgrow",
  "psi.spellpiece.trick_overgrow.desc": "Fertilizes a block at the given point",
  "psi.spellpiece.trick_greater_infusion": "Trick: Greater Infusion",
  "psi.spellpiece.trick_greater_infusion.desc": "Infuses Diamonds into Psigems, as well as infusing Redstone and Gold",
  "psi.spellpiece.trick_ebony_ivory": "Trick: Ebony & Ivory",
  "psi.spellpiece.trick_ebony_ivory.desc": "Infuses Coal and Quartz while in the End, while still infusing Redstone, Gold, and Diamonds",
  "psi.spellpiece.trick_speed": "Trick: Speed",
  "psi.spellpiece.trick_speed.desc": "Applies a Speed effect",
  "psi.spellpiece.trick_haste": "Trick: Haste",
  "psi.spellpiece.trick_haste.desc": "Applies a Haste effect",
  "psi.spellpiece.trick_strength": "Trick: Strength",
  "psi.spellpiece.trick_strength.desc": "Applies a Strength effect",
  "psi.spellpiece.trick_jump_boost": "Trick: Jump Boost",
  "psi.spellpiece.trick_jump_boost.desc": "Applies a Jump Boost effect",
  "psi.spellpiece.trick_water_breathing": "Trick: Water Breathing",
  "psi.spellpiece.trick_water_breathing.desc": "Applies a Water Breathing effect",
  "psi.spellpiece.trick_fire_resistance": "Trick: Fire Resistance",
  "psi.spellpiece.trick_fire_resistance.desc": "Applies a Fire Resistance effect",
  "psi.spellpiece.trick_invisibility": "Trick: Invisibility",
  "psi.spellpiece.trick_invisibility.desc": "Applies an Invisibility effect",
  "psi.spellpiece.trick_regeneration": "Trick: Regeneration",
  "psi.spellpiece.trick_regeneration.desc": "Applies a Regeneration effect",
  "psi.spellpiece.trick_resistance": "Trick: Resistance",
  "psi.spellpiece.trick_resistance.desc": "Applies a Resistance effect",
  "psi.spellpiece.trick_slowness": "Trick: Slowness",
  "psi.spellpiece.trick_slowness.desc": "Applies a Slowness effect",
  "psi.spellpiece.trick_weakness": "Trick: Weakness",
  "psi.spellpiece.trick_weakness.desc": "Applies a Weakness effect",
  "psi.spellpiece.trick_wither": "Trick: Wither",
  "psi.spellpiece.trick_wither.desc": "Applies a Wither effect",
  "psi.spellpiece.trick_ignite": "Trick: Ignite",
  "psi.spellpiece.trick_ignite.desc": "Sets an entity on fire",
  "psi.spellpiece.trick_eidos_anchor": "Trick: Eidos Anchor",
  "psi.spellpiece.trick_eidos_anchor.desc": "Returns the caster to current position after target Time",
  "psi.spellpiece.trick_eidos_reversal": "Trick: Eidos Reversal",
  "psi.spellpiece.trick_eidos_reversal.desc": "Takes the caster back in time",
  "psi.spellpiece.trick_smelt_item": "Trick: Smelt Item",
  "psi.spellpiece.trick_smelt_item.desc": "Smelts an item entity into its smelted counterpart",
  "psi.spellpiece.trick_smelt_block": "Trick: Smelt Block",
  "psi.spellpiece.trick_smelt_block.desc": "Smelts a block into its smelted counterpart",
  "psi.spellpiece.trick_conjure_block": "Trick: Conjure Block",
  "psi.spellpiece.trick_conjure_block.desc": "Conjures a block in the given position",
  "psi.spellpiece.trick_conjure_light": "Trick: Conjure Light",
  "psi.spellpiece.trick_conjure_light.desc": "Conjures a light in the given position",
  "psi.spellpiece.trick_conjure_block_sequence": "Trick: Conjure Block Sequence",
  "psi.spellpiece.trick_conjure_block_sequence.desc": "Conjures a block sequence",
  "psi.spellpiece.trick_switch_target_slot": "Trick: Switch Focus Slot",
  "psi.spellpiece.trick_switch_target_slot.desc": "Changes the focused slot of this spell, if toggle is enabled selects from the entire main inventory",
  "psi.spellpiece.trick_save_vector": "Trick: Save Vector",
  "psi.spellpiece.trick_save_vector.desc": "Saves a vector to CAD Memory",
  "psi.spellpiece.trick_break_loop": "Trick: Break Loop",
  "psi.spellpiece.trick_break_loop.desc": "Stops loop if target is within (-1,1)",
  "psi.spellpiece.trick_play_sound": "Trick: Emit Note",
  "psi.spellpiece.trick_play_sound.desc": "Plays a note block sound",
  "psi.spellpiece.trick_detonate": "Trick: Detonate",
  "psi.spellpiece.trick_detonate.desc": "Detonates all charges in the radius of the caster",
  "psi.spellpiece.trick_move_block_sequence": "Trick: Move Block Sequence",
  "psi.spellpiece.trick_move_block_sequence.desc": "Moves a sequence of blocks a defined direction, starting with in a position",
  "psi.spellpiece.trick_till": "Trick: Till",
  "psi.spellpiece.trick_till_sequence": "Trick: Till Sequence",
  "psi.spellpiece.trick_till.desc": "Tills a block at the given position",
  "psi.spellpiece.trick_till_sequence.desc": "Tills blocks starting at the given position",
  "psi.spellpiece.operator_swizzle": "Operator: Recompose Number",
  "psi.spellpiece.operator_swizzle.desc": "Reconstructs a number according to the pattern in the mask",
  "psi.spellparam.target": "Target",
  "psi.spellparam.number": "Number",
  "psi.spellparam.root": "Root",
  "psi.spellparam.list1": "List A",
  "psi.spellparam.list2": "List B",
  "psi.spellparam.list": "List",
  "psi.spellparam.from1": "From",
  "psi.spellparam.from2": "From",
  "psi.spellparam.to1": "To",
  "psi.spellparam.to2": "To",
  "psi.spellparam.toggle": "Toggle",
  "psi.spellparam.number1": "Number A",
  "psi.spellparam.number2": "Number B",
  "psi.spellparam.number3": "Number C",
  "psi.spellparam.number4": "Number D",
  "psi.spellparam.vector1": "Vector A",
  "psi.spellparam.vector2": "Vector B",
  "psi.spellparam.vector3": "Vector C",
  "psi.spellparam.vector4": "Vector D",
  "psi.spellparam.position": "Position",
  "psi.spellparam.ray": "Ray",
  "psi.spellparam.max": "Max",
  "psi.spellparam.min": "Min",
  "psi.spellparam.power": "Power",
  "psi.spellparam.direction": "Direction",
  "psi.spellparam.speed": "Speed",
  "psi.spellparam.x": "X",
  "psi.spellparam.y": "Y",
  "psi.spellparam.z": "Z",
  "psi.spellparam.radius": "Radius",
  "psi.spellparam.distance": "Distance",
  "psi.spellparam.time": "Time",
  "psi.spellparam.constant": "Constant",
  "psi.spellparam.shift": "Shift",
  "psi.spellparam.slot": "Slot",
  "psi.spellparam.base": "Base",
  "psi.spellparam.vector": "Vector",
  "psi.spellparam.axis": "Axis",
  "psi.spellparam.angle": "Angle",
  "psi.spellparam.channel": "Channel",
  "psi.spellparam.instrument": "Instrument",
  "psi.spellparam.volume": "Volume",
  "psi.spellparam.pitch": "Pitch",
  "psi.spellparam.mask": "Mask",
  "psi.datatype.void": "None",
  "psi.datatype.any": "Any",
  "psi.datatype.double": "Number",
  "psi.datatype.integer": "Number",
  "psi.datatype.number": "Number",
  "psi.datatype.vector3": "Vector",
  "psi.datatype.entity": "Entity",
  "psi.datatype.living_entity": "Entity (Living)",
  "psi.datatype.living_entity_base": "Entity (Living)",
  "psi.datatype.player_entity": "Entity (Player, Living)",
  "psi.datatype.entity_list_wrapper": "Entity List",
  "psi.spellerror.nospell": "No Spell to compile",
  "psi.spellerror.invalid_base": "ERROR: Cannot interpret bases below 2",
  "psi.spellerror.nthroot": "ERROR: Even numbered roots can't accept negative numbers",
  "psi.spellerror.noname": "Spell is Unnamed",
  "psi.spellerror.notricks": "Spell has no Tricks",
  "psi.spellerror.unsetparam": "A required Parameter is not set",
  "psi.spellerror.nullparam": "A Parameter is facing an empty cell",
  "psi.spellerror.invalidparam": "A Parameter is facing an invalid piece",
  "psi.spellerror.samesideparams": "Two or more Parameters are sharing a side",
  "psi.spellerror.loop": "Can't resolve due to endless loop",
  "psi.spellerror.nonpositivevalue": "A Number Parameter that needs to be positive isn't",
  "psi.spellerror.noninteger": "A Number Parameter that needs to an integer isn't",
  "psi.spellerror.nonpositiveinteger": "A Number Parameter that needs to be a positive integer isn't",
  "psi.spellerror.statoverflow": "Spell Stats overflow past maximum possible integer",
  "psi.spellerror.exclusiveparams": "Two mutually exclusive parameters are set",
  "psi.spellerror.position": "Error Position: [%d, %d].",
  "psi.spellerror.dividebyzero": "ERROR: Divide by zero.",
  "psi.spellerror.nulltarget": "ERROR: Spell Entity target is non existent.",
  "psi.spellerror.nullvector": "ERROR: Spell Operation Vector is non existent or null.",
  "psi.spellerror.outsideradius": "ERROR: Spell target is outside maximum 32 block radius.",
  "psi.spellerror.outsidetrigdomain": "ERROR: Value is outside inverse trignometric function's domain.",
  "psi.spellerror.bossimmune": "ERROR: Attempted to cast a spell on an immune entity or a boss.",
  "psi.spellerror.nocad": "ERROR: Caster has no CAD.",
  "psi.spellerror.memoryoutofbounds": "ERROR: Memory access out of bounds.",
  "psi.spellerror.lockedmemory": "ERROR: Memory slot is locked.",
  "psi.spellerror.immunetarget": "ERROR: Target entity is immune or a boss.",
  "psi.spellerror.negativenumber": "ERROR: Target number is negative in a piece where it can't be.",
  "psi.spellerror.nonaxial": "ERROR: Vector cannot be non-axial",
  "psi.spellerror.volume": "ERROR: Volume must be between [0,1]",
  "psi.spellerror.instruments": "ERROR: Instrument value must be between [0,15]",
  "psi.spellerror.pitch": "ERROR: Pitch value must be between [0,24]",
  "psi.spellerror.out_of_bounds": "ERROR: The provided index is not within the range of the list",
  "psi.levelskip": "Psi has found save data from a previous world.<br>Would you like to load it?<br><br>If you choose to load it, you'll be taken instantly to Level %d. Otherwise, this message won't show up again this session.",
  "psi.spellerror.armor": "ERROR: Selector only works in armor",
  "command.psi.learn.usage": "/psi-learn <group> [player]",
  "command.psi.learn.success": "Successfully taught %s %s",
  "command.psi.learn.success.all": "Successfully taught %s all of Psi",
  "command.psi.learn.should_not": "%s already knows %s",
  "command.psi.learn.players": "%s isn't a player, only players can have Psi knowledge",
  "command.psi.learn.console": "The console can't learn Psi. Try specifying a player! /psi-learn <group> [player]",
  "command.psi.learn.not_a_group": "'%s' is not a valid Psi piece group",
  "command.psi.learn.unknown": "This player has no Psi data. Report this to the mod author.",
  "command.psi.unlearn.usage": "/psi-unlearn <group> [player]",
  "command.psi.unlearn.success": "Successfully made %s forget %s",
  "command.psi.unlearn.success.all": "Successfully made %s forget all of Psi",
  "command.psi.unlearn.should_not": "%s doesn't know %s",
  "command.psi.unlearn.players": "%s isn't a player, only players can have Psi knowledge",
  "command.psi.unlearn.console": "The console can't learn Psi. Try specifying a player! /psi-unlearn <group> [player]",
  "command.psi.unlearn.not_a_group": "'%s' is not a valid Psi piece group",
  "command.psi.unlearn.unknown": "This player has no Psi data. Report this to the mod author.",
  "psi.tutorial1": "Tutorial 1",
  "psi.tutorial2": "Tutorial 2",
  "psi.tutorial3": "Tutorial 3",
  "psi.tutorial4": "Tutorial 4",
  "psi.numbers_intro": "Numbers 101",
  "psi.vectors_intro": "Vectors 101",
  "psi.entities_intro": "Entities 101",
  "psi.projectiles": "Alternative Casting",
  "psi.block_works": "Blockworks",
  "psi.infusion": "Psimetal Infusion",
  "psi.movement": "Movement Advances",
  "psi.loopcasting": "Loopcasting",
  "psi.block_movement": "Block Movement",
  "psi.elemental_arts": "Elemental Arts",
  "psi.greater_infusion": "Greater Infusion",
  "psi.tool_casting": "Tool Casting",
  "psi.positive_effects": "Positive Effects",
  "psi.negative_effects": "Negative Effects",
  "psi.exosuit_casting": "Exosuit Casting",
  "psi.trignometry": "Trigonometry",
  "psi.smeltery": "Smeltery",
  "psi.flow_control": "Flow Control",
  "psi.block_conjuration": "Block Conjuration",
  "psi.eidos_ceversal": "Eidos Manipulation",
  "psi.detection_dynamics": "Detection & Focus",
  "psi.memory_management": "Memory Management",
  "psi.secondary_operators": "Secondary Operators",
  "psi.misc_tricks": "Misc Tricks",
  "psi.list_operations": "List Operations",
  "psi.fake_level_psidust": "Psidust Infusion",
  "jei.psi.category.trick": "Spell Infusion",
  "psi.book.name": "Taurus Silver's Codex",
  "psi.book.landing_text": "How 2 Psi. (This book is a work in progress; expect many crosslinks to be broken. I'm workin' on it.)",
  "psi.fake_level_psidust.desc": "Craft your first Psidust!",
  "psi.subtitle.book": "Sweet Alexum plays in the distance"
  "psi.book.category.basics": "Basics",
  "psi.book.entry.introduction": "Introduction",
  "psi.book.page.introduction.0": "Welcome to $(thing)Psi$(0), the greatest spell-program-based magitech mod on this side of the universe!$(p)To begin your journey to become a spellslinging mage, you'll first need some $(l:components/psidust)$(item)Psidust$(0)$(/l)-- however, one does not simply craft the stuff.$(p)Instead, start by crafting a $(l:basics/cad_assembler)$(item)CAD Assembler$(0)$(/l) and an $(l:components/assembly#iron)$(item)Iron CAD Assembly$(0)$(/l).",
  "psi.book.page.introduction.1": "Place the $(l:basics/cad_assembler)$(item)CAD Assembler$(0)$(/l) and insert the $(l:components/assembly#iron)$(item)Iron CAD Assembly$(0)$(/l) to construct a very bare-bones $(thing)Casting Assistant Device$(0) ($(thing)CAD$(0), for short).$(p)From there, drop some $(item)Redstone Dust$(0) on the ground, point your new $(thing)CAD$(0) at the dust, and cast with it ($(k:use)) to create some $(l:components/psidust)$(item)Psidust$(0)$(/l).",
  "psi.book.entry.cadAssembler": "CAD Assembler",
  "psi.book.page.cadAssembler.0": "The $(l:basics/cad_assembler)$(item)CAD Assembler$(0)$(/l) is the heart of $(thing)Psi$(0), serving two essential functions.$(p)First, it (as its name suggests) assembles a $(thing)CAD$(0) from its component parts. Second, it loads $(o)non-empty$() $(l:items/spell_bullet)$(item)Spell Bullets$(0)$(/l) into $(thing)CADs$(0) (as well as other things that hold bullets, such as $(l:items/psi_tools)$(item)Psimetal Tools$(0)$(/l)).",
  "psi.book.page.cadAssembler.1": "Build-a-CAD Workshop",
  "psi.book.page.cadAssembler.2": "The simplest CAD that can cast",
  "psi.book.page.cadAssembler.3": "A $(thing)CAD$(0) is built from of up to five components; the simplest $(thing)CAD$(0) only uses one component, an $(l:components/assembly)$(item)Assembly$(0)$(/l), though this is only useful for crafting $(l:components/psidust)$(item)Psidust$(0)$(/l).$(p)A $(thing)CAD$(0) capable of casting $(thing)Spells$(0) requires a $(l:components/core)$(item)Core$(0)$(/l) and a $(l:components/socket)$(item)Socket$(0)$(/l) as well.$(p)Adding a $(l:components/battery)$(item)Battery$(0)$(/l) slightly increases a user's maximum $(thing)Psi energy$(0), and adding a $(l:components/colorizer)$(item)Colorizer$(0)$(/l) changes the color of casted $(thing)Spells$(0) (purely cosmetically).",
  "psi.book.page.cadAssembler.4": "Once a $(thing)CAD$(0) is created, it can be placed in the leftmost panel of the $(l:basics/cad_assembler)$(item)CAD Assembler$(0)$(/l). When placed there, the slots below open; $(l:items/spell_bullet)$(item)Spell Bullets$(0)$(/l) can be placed in these slots to be loaded into the $(thing)CAD$(0). Once the bullets are loaded, the $(thing)CAD$(0) is removed and in-hand, and the $(thing)Psi master keybind$(0) ($(k:psimisc.keybind)) is held, the bullets' $(thing)Spells$(0) will be displayed on a HUD, ready to be selected and cast.",
  "psi.book.page.cadAssembler.5": "A CAD with one bullet loaded",
  "psi.book.entry.spellProgrammer": "Spell Programmer",
  "psi.book.page.spellProgrammer.0": "If the $(l:basics/cad_assembler)$(item)CAD Assembler$(0)$(/l) is the heart of $(thing)Psi$(0), then the $(l:basics/spell_programmer)$(item)Spell Programmer$(0)$(/l) is the brains of the mod. It's where $(thing)Spells$(0) are written and compiled, and eventually copied into $(l:items/spell_bullet)$(item)Spell Bullets$(0)$(/l) to be cast.$(p)When placed and opened ($(k:use)), it displays a large 9x9 grid; see $(l:basics/tutorial_1)the tutorial entries$(/l) for more in-depth knowledge on using this grid.",
  "psi.book.page.spellProgrammer.1": "Hour Of Code",
  "psi.book.entry.vectorPrimer": "A Primer On Vectors",
  "psi.book.page.vectorPrimer.0": "$(thing)Psi$(0) uses the concept of a Vector quite extensively. Therefore, if you haven't the foggiest idea what a vector is, I quite strongly recommend you watch the video below.$(p)The explanation in the next few pages is $(l)simplified$(), for beginners. Don't take it as definitive.",
  "psi.book.page.vectorPrimer.1": "In the wonderful world of $(thing)Psi$(0) (and indeed in a $(thing)Minecraft$(0) world), all vectors are three-dimensional. In essence, they're just $(o)lists of three coordinates$(): x, y, z.$(p)The x-coordinate represents east when positive and west when negative, the y-direction up and down, and the z-direction south and north.$(p)If this doesn't make sense yet, open the debug screen and run around, paying attention to the row labeled \"XYZ:\".",
  "psi.book.page.vectorPrimer.2": "That list of three numbers, in fact, is the first type of vector you'll see: a $(l)position vector$().$(p)A position vector simply represents the location of a block, or an entity, or perhaps some empty space in the world. A single fixed location, represented by a list [x, y, z].$(p)However, not all vectors represent positions-- and it's important to note that $(l)any three numbers in a list make up a vector$().",
  "psi.book.page.vectorPrimer.3": "The interesting thing about vectors is that they're extremely easy to add.$(p)For example, say we have a grass block at some location [x, y, z].$(p)If we wish to add another vector, say [0, 1, 0], to this one, all we would have to do is add corresponding numbers: our result would be [x+0, y+1, z+0], or just [x, y+1, z].",
  "psi.book.page.vectorPrimer.4": "Since the y-component of our new vector has increased by one, and positive y means up, it simply represents the block above our grass block.$(p)The vector [0, 1, 0] represents the $(o)difference$() in position between our original and new vector, and it's our second type of vector: an $(l)offset vector$().",
  "psi.book.page.vectorPrimer.5": "Offset vectors are what most spellslingers spend the majority of their time manipulating, so a mastery over them is essential to anyone who aspires to be great.$(p)Usually, a mage starts with a single position vector, then adds, subtracts, or otherwise combines offset vectors with this position vector in order to target their desired point in the world.",
  "psi.book.page.vectorPrimer.6": "Offset vectors have $(l)magnitudes$().$(p)You can think of an offset vector's magnitude as its \"length,\" or the distance between a position in the world, and that same position when the offset vector is added to it.$(p)For example, our earlier offset vector [0, 1, 0] simply moved the position one block-length up, so it had length (and therefore magnitude) 1.",
  "psi.book.page.vectorPrimer.7": "Since a distance is always positive, so are vectors' magnitudes.$(p)Thus, consider the vector [0, -3, 0]: it represents down, three blocks-- yet the total distance moved is three blocks, and the \"down\" bit doesn't matter.$(p)Therefore, the magnitude of this vector is $(l)positive$() 3.",
  "psi.book.page.vectorPrimer.8": "Offset vectors also have $(l)directions$().",
  "psi.book.entry.tutorial1": "Tutorial (1): Writing A Spell",
  "psi.book.page.tutorial1.0": "Congratulations on getting acquainted with your brand-new $(thing)CAD$(0)! This tablet will serve as a reference manual for this mod, but certain entries (like this one) are tutorials, introducing you to the concepts and terms of a proper spellslinger. (Don't worry, this is the longest tutorial, as it covers all the basics.)",
  "psi.book.page.tutorial1.1": "$(o)Note that most keywords in $(item)this color$(0) are links, and can be clicked on to learn more about their respective items, including their recipes.$()$(p)To get started with spell programming, you'll need (duh) a $(l:basics/spell_programmer)$(item)Spell Programmer$(0)$(/l).$(p)Additionally, to actually execute your $(thing)Spells$(0), you'll need a better $(thing)CAD$(0) than the one you have right now-- you can construct one in your $(l:basics/cad_assembler)$(item)CAD Assembler$(0)$(/l).",
  "psi.book.page.tutorial1.2": "To that end, you probably want to make a $(item)Basic CAD Core$(0) and $(item)Basic CAD Socket$(0).$(p)You don't have to make another $(l:components/assembly)$(item)Assembly$(0)$(/l); you can put your current $(thing)CAD$(0) in a crafting grid to revert it back to one (since it's pretty much just an $(l:components/assembly)$(item)Assembly$(0)$(/l) anyway).$(p)Additionally, $(thing)Spells$(0) can't be cast directly out of a $(thing)CAD$(0); instead they're stored in $(l:items/spell_bullet)$(item)Spell Bullets$(0)$(/l), so to get rolling you'll need a small handful of those as well.",
  "psi.book.page.tutorial1.3": "Once all your materials are gathered, the standard workflow for $(thing)Spell$(0) creation goes as follows:$(p)$(li)Construct a $(thing)Spell$(0) in the $(l:basics/spell_programmer)$(item)Programmer$(0)$(/l);$(br)$(li)Copy the $(thing)Spell$(0) into a $(l:items/spell_bullet)$(item)Spell Bullet$(0)$(/l);$(br)$(li)Load the $(l:items/spell_bullet)$(item)Spell Bullet$(0)$(/l) into your $(thing)CAD$(0) using the $(l:basics/cad_assembler)$(item)CAD Assembler$(0)$(/l);$(br)$(li)Hold your $(thing)CAD$(0), point, and cast.$(p)In this tutorial and the next, we'll walk you through this process.",
  "psi.book.page.tutorial1.4": "When you open up your $(l:basics/spell_programmer)$(item)Spell Programmer$(0)$(/l), you'll see a large grid-- this is where $(thing)Spells$(0) are made, and where the magic happens.$(p)$(thing)Psi$(0)'s programming system isn't $(o)quite$() a traditional, complex one; instead, $(thing)Spells$(0) are composed of simple actions, called $(thing)Tricks$(0), executed in order.$(p)The whole mod centers around simply getting $(thing)Tricks$(0) to do what you want them to.",
  "psi.book.page.tutorial1.5": "$(thing)Psi$(0)'s $(thing)Spells$(0) are all created on the $(l:basics/spell_programmer)$(item)Programmer$(0)$(/l)'s grid from $(thing)Spell Pieces$(0); you can add as many pieces of as many types to a grid as you want, though not all arrangements of $(thing)Spell Pieces$(0) will produce valid $(thing)Spells$(0).$(p)To add a piece to the grid, right-click where you want the piece to go, and select from the menu of pieces that pops up.",
<<<<<<< HEAD
  "psi.book.page.tutorial1.6": "When selecting from the menu of $(thing)Spell Pieces$(0), you can hover over one to see its name, and click on it to place it in the grid.$(p)Don't worry about the myriad of pieces that appear for you; you can simply type to search for specific pieces, and press Enter to place the first search result.$(p)You can hold Shift and hover over the question-mark button on the bottom-right to see a more comprehensive list of shortcuts.",
  "psi.book.page.tutorial1.7": "Start by placing the piece called $(item)Trick: Debug$(0) anywhere on the grid.$(p)As mentioned before, $(thing)Tricks$(0) like this one are the $(thing)Spell Pieces$(0) responsible for interacting with the world.$(p)This is the simplest $(thing)Trick$(0), only saying something in your chat, but $(thing)Tricks$(0) can use your $(thing)Psi$(0) energy to do a wide variety of things.",
  "psi.book.page.tutorial1.8": "Next, select a grid piece $(l)adjacent$() to your $(item)Trick: Debug$(0), and place the piece called $(item)Selector: Caster$(0) there.$(p)$(thing)Selectors$(0) are the $(thing)Spell Pieces$(0) that provide information about the surrounding world to $(thing)Spells$(0).$(p)This particular piece represents you, the eventual caster of this spell, and is probably one you will use quite often, as it's a natural starting-point for your spells.",
  "psi.book.page.tutorial1.9": "Most non-$(thing)Selector$(0) $(thing)Spell Pieces$(0) (and, in fact, some $(thing)Selectors$(0) as well) need $(l)parameters$(), which tell the pieces what to perform their actions on.$(p)For example, we know that $(item)Trick: Debug$(0) prints something out; its first parameter tells it $(o)what$() to print.$(p)$(o)Parameters also have $(l)types$()$(o), but we'll worry about those in a later tutorial.$()",
  "psi.book.page.tutorial1.10": "Left-click your $(item)Trick: Debug$(0) piece; you should see a panel appear on the left-hand side with two rows, each with a label and several small arrows. These two rows represent the two parameters that $(item)Trick: Debug$(0) takes.$(p)Ignore the row labeled \"Number\" for now (it'll be explained in more detail later); just know that the dot in the center means it's optional, and that for a spell to function all $(o)non$()-optional parameters must be filled.",
  "psi.book.page.tutorial1.11": "Look at the arrows in the row labeled \"Target,\" and select the one corresponding to where you placed $(item)Selector: Caster$(0) (for example, if you placed it to the right of $(item)Trick: Debug$(0), select the rightmost arrow pointing left), so it appears that the $(thing)Selector$(0) piece is pointing towards the $(thing)Trick$(0) piece.$(p)This will make the $(thing)Trick$(0) use the $(thing)selector$(0) as its Target parameter.",
  "psi.book.page.tutorial1.12": "At this point, the X in the upper-left hand corner of the $(thing)Programmer$(0) should have turned into a check-mark (if it's not, you can hover over it to see the problem with the spell to try to correct it.)$(p)A check-mark means that the spell in the grid is valid, and can be copied into $(l:items/spell_bullet)$(item)Spell Bullets$(0)$(/l) and cast.$(p)And that's exactly what we'll do in $(l:basics/tutorial_2)$(item)the next tutorial$(0)$(/l)!",
  "psi.book.page.tutorial1.13": "Your spell should look something like this"
}
=======
  "psi.book.page.tutorial1.6": "When selecting from the menu of $(thing)Spell Pieces$(0), you can hover over one to see its name, and click on it to place it in the grid.$(p)Don't worry about the myriad of pieces that appear for you; you can simply type to search for specific pieces, and press Enter to place the first search result.$(p)You can hold Shift and hover over the \"?\" button on the bottom-right to see the full list of shortcuts.",
  "psi.book.page.tutorial1.7": "Start by placing the piece called $(item)Trick: Debug$(0) anywhere on the grid.$(p)As mentioned before, $(thing)Tricks$(0) like this one are the $(thing)Spell Pieces$(0) responsible for interacting with the world.$(p)This is the simplest $(thing)Trick$(0); all it does is say something in your chat. Yet $(thing)Tricks$(0) can use your $(thing)Psi energy$(0) to do a huge variety of things.",
  "psi.book.page.tutorial1.8": "Select a grid piece $(l)adjacent$() to your $(item)Trick: Debug$(0), and place the piece called $(item)Selector: Caster$(0) there.$(p)$(thing)Selectors$(0) are the $(thing)Spell Pieces$(0) that provide information about the surrounding world to $(thing)Spells$(0).$(p)This particular piece represents you, the eventual caster of this $(thing)Spell$(0). You'll probably use this one quite often, as it's a natural starting-point for your $(thing)Spells$(0).",
  "psi.book.page.tutorial1.9": "Most non-$(thing)Selector$(0) $(thing)Spell Pieces$(0) (and, in fact, some $(thing)Selectors$(0) as well) need $(l)parameters$(), which tell the pieces what to perform their actions on.$(p)For example, we know that $(item)Trick: Debug$(0) sends something to chat; its first parameter tells it $(o)what$() to say.$(p)$(o)Parameters also have $(l)data types$()$(o), or $(l)types$()$(o) for short, but we'll worry about those in a later tutorial.$()",
  "psi.book.page.tutorial1.10": "Left-click your $(item)Trick: Debug$(0) piece; you should see a panel appear on the left-hand side with two rows. Each row should have a label and several small arrows.$(p)These two rows represent the two parameters that $(item)Trick: Debug$(0) takes.$(p)Ignore the row labeled \"Number\" for now; just know that the dot in the center means it's optional. For a $(thing)Spell$(0) to function, all $(o)non$()-optional parameters must be filled.",
  "psi.book.page.tutorial1.11": "Look at the arrows labeled \"Target,\" and select the one corresponding to where you placed $(item)Selector: Caster$(0) (for example, if you placed it to the right of $(item)Trick: Debug$(0), select the rightmost arrow that points left), so it appears that the $(thing)Selector$(0) piece is pointing towards the $(thing)Trick$(0) piece.",
  "psi.book.page.tutorial1.12": "This will make the $(thing)Trick$(0) use the $(thing)Selector$(0) as its \"Target\" parameter.$(p)We say that $(item)Trick: Debug$(0) $(l)accepts$() or $(l)takes$() $(item)Selector: Caster$(0) as its \"Target\" parameter.$(p)Parameters are also known as $(l)arguments$(), or simply $(l)inputs$().$(p)$(o)(Technical note: In programming-vocabulary there's a subtle difference in the terms, but it's beyond the scope of this tablet.)$()",
  "psi.book.page.tutorial1.13": "Your final $(thing)Spell$(0) should look something like this",
  "psi.book.page.tutorial1.14": "At this point, the X in the upper-left hand corner of the $(l:basics/spell_programmer)$(item)Programmer$(0)$(/l) should have turned into a check-mark.$(p)A check-mark means that the $(thing)Spell$(0) $(l)compiled successfully$() (which is a compact way of saying \"the $(l:basics/spell_programmer)$(item)Programmer$(0)$(/l) made sure that all the $(thing)Spell Pieces$(0) you've placed fit together correctly\"). ",
  "psi.book.page.tutorial1.15": "If at any time the X is present (which means that the compilation $(l)failed$() or $(l)errored$()), you can hover over it to see the problem with your $(thing)Spell$(0) and correct that problem.$(p)Once your $(thing)Spell$(0) compiles successfully, it can be copied into a $(l:items/spell_bullet)$(item)Spell Bullet$(0)$(/l) and cast. And that's exactly what we'll do in $(l:basics/tutorial_2)the next tutorial$(/l)!",
  "psi.book.entry.tutorial2": "Tutorial (2): Casting A Spell",
<<<<<<< HEAD
  "psi.book.page.tutorial2.0": "So you've written your first $(thing)Spell$(0)! (If you haven't done that yet, go learn to do that $(l:basics/tutorial_1)here$(/l).) Actually casting it, though, takes a few extra steps.$(p)First, close out your $(l:basics/spell_programmer)$(item)Spell Programmer$(0)$(/l), hold a $(l:items/spell_bullet)$(item)Spell Bullet$(0)$(/l) (which you should have prepared in the last tutorial), and use ($(k:use)) the bullet on the Programmer. You should hear a chime, and the bullet should rename itself to \"Debug.\"",
  "psi.book.page.tutorial2.1": "The bullet now contains a copy of the $(thing)Spell$(0) you've written, and is ready to be loaded into your $(thing)CAD$(0).$(p)To load a $(l:items/spell_bullet)$(item)Spell Bullet$(0)$(/l) into your $(thing)CAD$(0), open your $(l:basics/cad_assembler)$(item)CAD Assembler$(0)$(/l) and insert your $(thing)CAD$(0) into the leftmost slot. Some of the slots below it should open; place the bullet with the spell you've written in one of these slots. Take your $(thing)CAD$(0) back out.",
  "psi.book.page.tutorial2.2": "$(thing)CADs$(0) can hold multiple $(l:items/spell_bullet)$(item)Spell Bullets$(0)$(/l), and therefore multiple $(thing)Spells$(0); the active spell to be cast can be switched on-the-fly.$(p)To select a spell to cast, hold your $(thing)CAD$(0) in either hand and hold down the $(thing)Psi master keybind$(0) ($(k:psimisc.keybind)).$(p)A HUD should appear; hover over the spell labeled \"Debug\" (the one you just wrote) and release the key to select it.",
  "psi.book.page.tutorial2.3": "When you cast the spell ($(k:use)), you should see displayed in chat a long block of text that includes your username and coordinates. If so: congratulations! You've managed to write and cast your first spell!$(p)If you need to craft more $(l:components/psidust)$(item)Psidust$(0)$(/l), re-open the HUD and select a slot without a spell stored.",
  "psi.book.page.tutorial2.4": "$(l)A sidenote: you should only carry one $(thing)CAD$(0) at a time.$()$(p)If more than one is carried, their channeled $(thing)Psi$(0) energies interfere, shorting out any spells cast. This phenomenon, known as \"cast jamming,\" is best avoided by simply using one CAD.$(p)The $(l:basics/tutorial_3)next tutorial$(/l) will return to the $(l:basics/spell_programmer)$(item)Programmer$(0)$(/l) for more details about its mechanics.",
  "psi.book.entry.tutorial3": "Tutorial (3): Types & Connectors",
  "psi.book.page.tutorial3.0": "Let's talk about the \"Number\" parameter on $(item)Trick: Debug$(0) that we saw in $(l:basics/tutorial_1)the first tutorial$(/l); open up your $(l:basics/spell_programmer)$(item)Spell Programmer$(0)$(/l) and take a look at it.$(p)As mentioned previously, that parameter has an extra dot in the center, meaning it's optional and can be disabled by selecting the dot.",
  "psi.book.page.tutorial3.1": "$(item)Trick: Debug$(0)'s \"Number\" parameter is displayed as a label of sorts, so that multiple $(item)Trick: Debug$(0)s in a complex spell can be differentiated."
}
>>>>>>> Refactor generate_book to allow toggleable i18n
=======
  "psi.book.page.tutorial2.0": "So, you've written your first $(thing)Spell$(0)! Actually casting it, though, will take a few extra steps.$(p)First, close out your $(l:basics/spell_programmer)$(item)Spell Programmer$(0)$(/l), hold a $(l:items/spell_bullet)$(item)Spell Bullet$(0)$(/l) (which you should have prepared in the last tutorial), and use ($(k:use)) the bullet on the Programmer. You should hear a chime, and the bullet should rename itself to \"Debug.\"",
  "psi.book.page.tutorial2.1": "The bullet now contains a copy of the $(thing)Spell$(0) you've written, and is ready to be loaded into your $(thing)CAD$(0).$(p)To load a $(l:items/spell_bullet)$(item)Spell Bullet$(0)$(/l) into your $(thing)CAD$(0), open your $(l:basics/cad_assembler)$(item)CAD Assembler$(0)$(/l) and insert your $(thing)CAD$(0) into the leftmost slot. Some of the slots below it should open; place the bullet with the $(thing)Spell$(0) you've written in one of these slots. Take your $(thing)CAD$(0) back out.",
  "psi.book.page.tutorial2.2": "$(thing)CADs$(0) can hold multiple $(l:items/spell_bullet)$(item)Spell Bullets$(0)$(/l), and therefore multiple $(thing)Spells$(0); the active $(thing)Spell$(0) to be cast can be switched on-the-fly.$(p)To select a $(thing)Spell$(0) to cast, hold your $(thing)CAD$(0) in either hand and hold down the $(thing)Psi master keybind$(0) ($(k:psimisc.keybind)).$(p)A HUD should appear; hover over the $(thing)Spell$(0) labeled \"Debug\" (the one you just wrote) and release the key to select it.",
  "psi.book.page.tutorial2.3": "When you cast the $(thing)Spell$(0) ($(k:use)), you should see displayed in chat a long block of text that includes your username and coordinates. If so: congratulations! You've managed to write and cast your first $(thing)Spell$(0)!$(p)If you need to craft more $(l:components/psidust)$(item)Psidust$(0)$(/l), re-open the HUD and select a slot without a $(thing)Spell$(0) stored, then cast at $(item)Redstone Dust$(0) as you normally would.",
  "psi.book.page.tutorial2.4": "$(l)A sidenote: you should carry only one $(thing)CAD$(0) at a time.$()$(p)If more than one is carried, their channeled $(thing)Psi$(0) energies interfere, shorting out any $(thing)Spells$(0) cast. This phenomenon, known as \"cast jamming,\" is best avoided by simply keeping to one-$(thing)CAD$(0)-per-mage.$(p)Once you've successfully cast your Debug $(thing)Spell$(0), you can move on to $(l:basics/tutorial_3)the next tutorial$(/l).",
  "psi.book.entry.tutorial3": "Tutorial (3): Types & Numbers",
  "psi.book.page.tutorial3.0": "Open up your $(l:basics/spell_programmer)$(item)Spell Programmer$(0)$(/l) and take a look at your \"Debug\" $(thing)Spell$(0) again.$(p)Remember the \"Number\" parameter on $(item)Trick: Debug$(0) that we saw in $(l:basics/tutorial_1)the first tutorial$(/l)? We mentioned previously that that parameter has an extra dot in the center, meaning it can be disabled. But this time, we $(o)won't$() disable it.",
  "psi.book.page.tutorial3.1": "$(item)Trick: Debug$(0)'s \"Number\" parameter, when used, is printed as a label of sorts, so that multiple $(item)Trick: Debug$(0)s in a complex $(thing)Spell$(0) can be differentiated.$(p)The $(l)type$() of this parameter is \"Number,\" which means that the parameter will only accept arguments that output (or $(l)return$()) Numbers.$(p)(The first parameter, \"Target,\" accepts the special type \"Any,\" which means it can accept anything.)",
  "psi.book.page.tutorial3.2": "If you hold Shift and hover over a Spell Piece, it'll tell you the types of all its parameters, as well as its output's type. For example, we can see that the $(item)Selector: Caster$(0) piece returns an Entity, which isn't a Number. So we'll need some other piece to represent one.",
  "psi.book.page.tutorial3.3": "Tooltip for $(item)Selector: Caster$(0); it returns an Entity",
  "psi.book.page.tutorial3.4": "Choose an empty grid piece adjacent to $(item)Trick: Debug$(0), and place the piece called $(item)Constant: Number$(0).$(p)If you Shift-hover over this piece, you'll see that it $(o)does$() return a Number (in fact, it returns a Number Constant, which is a Number but more specific).$(p)Therefore, if you left-click your $(item)Trick: Debug$(0) again and point its Number parameter at the $(item)Constant: Number$(0), your $(thing)Spell$(0) should compile.",
  "psi.book.page.tutorial3.5": "To run your new-and-improved Debug $(thing)Spell$(0), you might believe that you need to unload the bullet, re-copy the $(thing)Spell$(0), reload the bullet, and re-select the $(thing)Spell$(0).$(p)Luckily, your $(thing)CAD$(0) comes with a shortcut: simply select your Debug $(thing)Spell$(0) on your $(thing)CAD$(0) and use ($(k:use)) it on your $(l:basics/spell_programmer)$(item)Programmer$(0)$(/l), and the $(thing)Spell$(0) stored in the corresponding bullet will update itself to the $(l:basics/spell_programmer)$(item)Programmer$(0)$(/l)'s version.",
  "psi.book.page.tutorial3.6": "If you cast your Debug $(thing)Spell$(0) now, you'll notice that you get the same long block of text as before, but with a bracketed zero in front: in fact, the same zero that was displayed in the $(item)Constant: Number$(0) piece when you placed it.$(p)So the logical next question is: How do we display a number $(o)other$() than zero?",
  "psi.book.page.tutorial3.7": "Well, the $(item)Constant: Number$(0) piece is special: to set its stored constant, all you have to do is select the piece and simply type a new number.$(p)All other $(thing)Spell Pieces$(0) are configured only from the left-hand parameter panel.$(p)$(o)Technical wayside: all Number Constants count as Numbers, but plain Numbers don't count as Number Constants. Only $(thing)Constant$(0) $(thing)Spell Pieces$(0) return Number Constants.$()",
  "psi.book.page.tutorial3.8": "Try editing the number stored in the $(item)Constant: Number$(0), updating the $(thing)Spell$(0) stored in your $(thing)CAD$(0), and re-casting. You should see that the prefixed number has, in fact, changed! Neat!",
  "psi.book.page.tutorial3.9": "Now, here's the thing: we've hooked $(item)Trick: Debug$(0) up to two different inputs at once.$(p)And truth be told, $(o)most$() $(thing)Spell Pieces$(0) take two (or even three) inputs. And when it comes right down to it, your $(thing)Spell$(0)'s inputs might end up adjacent to one another.$(p)That's where $(item)Connectors$(0) come in.",
  "psi.book.page.tutorial3.10": "Connectors are simple pieces, yet powerful: They take one input, of any type, and return that same input. Thus, if a certain $(thing)Spell Piece$(0) requires as input another piece that's two grid-spaces away, you can connect them with a $(item)Connector$(0).",
  "psi.book.page.tutorial3.11": "Bridge to Terabithia",
  "psi.book.page.tutorial3.12": "Of course, the true power of a $(item)Connector$(0) is that they can connect to each $(o)other$(): so you can of course daisy-chain them together to connect $(thing)Spell Pieces$(0) from as far-away as you please.$(p)Play around with some $(item)Connectors$(0), and as soon as you feel comfortable with them you can move on to $(l:basics/tutorial_5)the next tutorial$(/l)!",
  "psi.book.page.tutorial3.13": "The long way around",
  "psi.book.entry.tutorial4": "Tutorial (4): Move It",
  "psi.book.page.tutorial4.0": "Okay, okay. I know what you're thinking: \"This is boring. When do we start doing cool stuff?\" Well... now!$(p)Let's introduce a $(thing)Trick$(0) that actually interacts with the world-- introducing: $(item)Trick: Add Motion$(0).$(p)This trick (as you'd expect) takes an entity, and adds motion to it (i.e. gives it a push) in a certain direction.",
  "psi.book.page.tutorial4.1": "Examples of entities include: you, the caster; a chicken; a zombie; a minecart; a falling sand block; an arrow; the Wither.$(p)This $(thing)Trick$(0) takes as parameters an Entity (which represents the entity to move), a Vector (the direction to push it in), and a Number Constant (how hard the $(thing)Trick$(0) should push the entity).$(p)$(o)Note: If you don't understand what the word \"vector\" means, $(l:basics/vector_primer)this entry$(/l) should serve as a good introduction.$()",
  "psi.book.page.tutorial4.2": "Let's write a $(thing)Spell$(0) that, when cast, simply boosts its caster forwards, using $(item)Trick: Add Motion$(0).$(p)As mentioned before, $(item)Selector: Caster$(0) returns an Entity (namely: you, the caster), so we can use that as the first parameter to $(item)Trick: Add Motion$(0).$(p)We'd like the trick to boost you $(o)forward$()-- that is, $(o)in the direction you're looking$(). To do that, we'll introduce our next piece: $(item)Operator: Entity Look$(0).",
  "psi.book.page.tutorial4.3": "$(thing)Spell Pieces$(0) of the $(thing)Operator$(0) type do not pull information from the world, nor do they change it in any way. Instead, they merely $(o)transform$() one type of information into another.$(p)In particular, $(item)Operator: Entity Look$(0) accepts an Entity, and returns a unit Vector corresponding to the direction the Entity is looking in.$(p)Thus, one of these, hooked up to a $(item)Selector: Caster$(0), will return a Vector that points wherever you're looking at.",
<<<<<<< HEAD
  "psi.book.page.tutorial4.4": "Finally, for the last parameter of $(item)Trick: Add Motion$(0), a simple $(item)Constant: Number$(0) will do. I recommend the Number 3 for this; it's a good starting point, at least.$(p)Let's put this $(thing)Spell$(0) all together: first, open up your $(l:basics/spell_programmer)$(item)Spell Programmer$(0)$(/l) and clear any $(thing)Spell$(0) currently on it. Then, place a $(item)Trick: Add Motion$(0) near the middle of the grid.",
  "psi.book.page.tutorial4.5": "Place a $(item)Selector: Caster$(0) directly above the $(thing)Trick$(0), an $(item)Operator: Entity Look$(0) to its right, and a $(item)Constant: Number$(0) to its left. Fill in a value for the $(thing)Constant$(0).$(p)Place a $(item)Connector$(0) between the $(thing)Operator$(0) and the $(thing)Selector$(0), and then connect everything up so it looks like the image on the next page.",
  "psi.book.page.tutorial4.6": "TODO: add image here",
  "psi.book.page.tutorial4.7": "Copy the spell into your $(thing)CAD$(0), and cast. Congratulations! TODO next tutorial."
}
>>>>>>> more tutorial
=======
  "psi.book.page.tutorial4.4": "Finally, for the last parameter of $(item)Trick: Add Motion$(0), a simple $(item)Constant: Number$(0) will do.$(p)Let's put this $(thing)Spell$(0) all together: first, open up your $(l:basics/spell_programmer)$(item)Spell Programmer$(0)$(/l) and clear any $(thing)Spell$(0) currently on it. Then, place a $(item)Trick: Add Motion$(0) near the middle of the grid.",
  "psi.book.page.tutorial4.5": "Place a $(item)Selector: Caster$(0) directly above the $(thing)Trick$(0), an $(item)Operator: Entity Look$(0) to its right, and a $(item)Constant: Number$(0) to its left.$(p)Fill in a value for the $(thing)Constant$(0) (I recommend the number 3).$(p)Place a $(item)Connector$(0) between the $(thing)Operator$(0) and the $(thing)Selector$(0), and then set up all the parameters for the $(thing)Operator$(0) and $(thing)Trick$(0) so the $(thing)Spell$(0) compiles-- it should look something like the image on the next page.",
  "psi.book.page.tutorial4.6": "When push comes to shove",
  "psi.book.page.tutorial4.7": "Copy the $(thing)Spell$(0) into your $(thing)CAD$(0), look straight ahead, and cast. If you get thrown forward, then congratulations! You've just finished writing your first real $(thing)Spell$(0)!$(p)$(o)Note: Casting your new $(thing)Spell$(0) too many times in a row might be bad for your health. More on this in $(l:basics/tutorial_5)the next tutorial$(/l)$().$()",
  "psi.book.entry.tutorial5": "Tutorial (5): Limits",
  "psi.book.page.tutorial5.0": "Open your $(l:basics/spell_programmer)$(item)Spell Programmer$(0)$(/l) again, and review the $(thing)Spell$(0) you wrote in $(l:basics/tutorial_4)the last tutorial$(/l).$(p)When it compiled correctly, you should have seen five icons appear to the right of the grid, each with two numbers. These numerical stats define the practical limits on exactly what $(thing)Spells$(0) you're able to cast.",
  "psi.book.page.tutorial5.1": "The stats for your Add Motion $(thing)Spell$(0) (assuming your constant was 3)",
  "psi.book.page.tutorial5.2": "The first stat is $(thing)Complexity$(0); the total number of $(thing)Operators$(0), $(thing)Selectors$(0), and non-debug $(thing)Tricks$(0) in the $(thing)Spell$(0).$(p)Its maximum value is determined by the $(l:components/core)$(item)CAD Core$(0)$(/l) you have installed; if a $(thing)Spell$(0)'s $(thing)Complexity$(0) exceeds your $(thing)CAD$(0)'s capacity, it won't be castable.",
  "psi.book.page.tutorial5.3": "The second is $(thing)Potency$(0); the approximate total power draw of all $(thing)Tricks$(0) used in the $(thing)Spell$(0).$(p)Some $(thing)Tricks$(0) have a fixed $(thing)Potency$(0) cost per-use. However, most $(thing)Tricks$(0) that have a Number Constant-type parameter use it to determine their $(thing)Potency$(0); the higher the constant, the greater the $(thing)Potency$(0).$(p)Your $(thing)CAD$(0)'s maximum $(thing)Potency$(0) depends on its $(thing)Assembly$(0) component.",
  "psi.book.page.tutorial5.4": "The third stat is special-- it's called $(thing)Cost$(0), and it's unique in that your $(thing)CAD$(0) sets no limits on it.$(p)Instead, each time a $(thing)Spell$(0) is cast, it consumes its $(thing)Cost$(0) from your own body's $(thing)Psi energy$(0).$(p)The first number shown is the $(o)ideal$() $(thing)Cost$(0) of the $(thing)Spell$(0)-- nearly all $(l:components/assembly)$(item)CAD Assemblies$(0)$(/l) have inefficiencies that increase the $(thing)Cost$(0). The higher the $(l:components/assembly)$(item)Assembly$(0)$(/l)'s efficiency, the closer to ideal the actual $(thing)Cost$(0) (the second number) becomes.",
  "psi.book.page.tutorial5.5": "Your $(thing)Psi energy$(0) regenerates at around 500 units per second, limiting the speed at which you can cast $(thing)Spells$(0).$(p)Note that if you cast a $(thing)Spell$(0) without enough $(thing)Psi energy$(0) available (known as $(l)overdrawing$()), your $(thing)CAD$(0) will draw the excess cost from your own health, and promptly disable itself until your $(thing)Psi energy$(0) fully regenerates, for your own protection.$(p)Be careful: overdrawing can have lethal consequences!",
  "psi.book.page.tutorial5.6": "The fourth stat displayed on the $(l:basics/spell_programmer)$(item)Programmer$(0)$(/l) is $(thing)Projection$(0): the total number of non-debug $(thing)Tricks$(0) in the $(thing)Spell$(0).$(p)Your $(thing)CAD$(0)'s $(l:components/core)$(item)Core$(0)$(/l) determines your maximum $(thing)Projection$(0) per-$(thing)Spell$(0); too many tricks and the $(thing)Spell$(0) is uncastable.",
  "psi.book.page.tutorial5.7": "And the fifth and final stat is $(thing)Bandwidth$(0): the width or height of the $(thing)Spell$(0), measured in grid spaces-- whichever is larger.$(p)Its maximum is determined by your $(thing)CAD Socket$(0).$(p)This is, with a bit of ingenuity, one of the more interesting stats to work with; if your $(thing)Spell$(0) is too big, the technique of moving some pieces around and eliminating others to pack it into a smaller space is known as $(l)compression$().",
  "psi.book.page.tutorial5.8": "There's one final limitation on $(thing)Spells$(0): no $(thing)Trick$(0) can affect any blocks or entities further than 32 blocks away from its $(thing)Focal Point$(0)-- keep that in mind.$(p)For the normal $(l:items/spell_bullet)$(item)Spell Bullets$(0)$(/l) you've been using, their $(thing)Focal Point$(0) is just you, the caster.$(p)There's $(l:basics/tutorial_6)one final tutorial$(/l) lined up, putting most of what we've learned together, and then we'll cut you loose into the wider world of $(thing)Psi$(0). Good luck!",
  "psi.book.entry.tutorial6": "Tutorial (6)",
  "psi.book.page.tutorial6.0": "Do you like explosions?$(p)Of course you do. Everyone loves explosions!$(p)So let's make a $(thing)Spell$(0) that blows up whatever you're looking at when you cast it.$(p)What could possibly go wrong?",
  "psi.book.page.tutorial6.1": "To write this spell, we'll start with the $(thing)Trick$(0) we'll use to cause an explosion, and work backwards.$(p)Conveniently, it's named $(item)Trick: Explode$(0)-- so open up your $(l:basics/spell_programmer)$(item)Spell Programmer$(0)$(/l), clear out the grid, and place a $(item)Trick: Explode$(0) near the middle.$(p)Shift-hovering over it reveals that it accepts a Vector and a Number Constant as parameters.",
  "psi.book.page.tutorial6.2": "The Number Constant parameter represents the explosion's power-- easy enough to fill with a $(item)Constant: Number$(0) piece.$(p)The Vector, on the other hand, accepts the position vector of the location you want the explosion to go off at. This is what'll take a bit more effort to calculate."
}>>>>>>> stats tutorial
